/* The following code was generated by JFlex 1.4.3 on 15.11.9 18:59 */

package lv.modo.livescriptbrains.psi;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.intellij.psi.TokenType;
import com.intellij.util.containers.Stack;

import lv.modo.livescriptbrains.psi.LiveScriptTypes;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 15.11.9 18:59 from the specification file
 * <tt>D:/home/martin/dev/misc/LiveScriptBrains/src/lv/modo/livescriptbrains/psi/LiveScript.flex</tt>
 */
public class LiveScriptLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int ISTRING = 10;
  public static final int SPLIT_OP = 18;
  public static final int OBJECT = 24;
  public static final int DSTRING = 8;
  public static final int STRING_SUSPENDED = 14;
  public static final int REGEX = 16;
  public static final int LIST = 20;
  public static final int COMMENT_BLOCK = 6;
  public static final int YYINITIAL = 0;
  public static final int STRING_VAR = 22;
  public static final int INDENTED = 2;
  public static final int BLOCK_STATEMENT = 4;
  public static final int VSTRING = 12;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  1,  2,  2,  2,  2,  3,  3,  4,  4,  5,  6,  2,  2,  2,  2, 
     2,  2,  7,  7,  8,  9, 10, 10, 11, 12
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\32\1\66\1\0\1\70\1\67\22\0\1\32\1\57\1\35"+
    "\1\36\1\64\1\34\1\45\1\33\1\52\1\53\1\41\1\42\1\50"+
    "\1\65\1\10\1\40\1\4\2\2\1\3\6\1\1\47\1\56\1\46"+
    "\1\43\1\46\1\60\1\30\4\6\1\6\15\6\1\6\1\6\6\6"+
    "\1\54\1\31\1\55\1\46\1\7\1\0\1\24\1\63\1\61\1\17"+
    "\1\22\1\23\1\6\1\27\1\16\2\6\1\13\1\6\1\11\1\15"+
    "\2\6\1\21\1\25\1\20\1\12\1\14\1\62\1\6\1\26\1\6"+
    "\1\37\1\44\1\51\1\5\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\4\0\1\1\10\0\1\2\3\3\1\4\1\5\1\6"+
    "\12\5\1\7\1\2\1\10\2\2\1\11\1\12\1\13"+
    "\2\14\1\15\1\16\2\2\1\17\1\20\1\21\1\22"+
    "\1\23\1\24\1\25\1\26\3\5\2\27\3\10\4\30"+
    "\2\1\1\31\1\32\1\33\1\34\2\10\1\35\1\36"+
    "\1\35\1\10\1\37\1\40\1\41\1\3\1\0\2\3"+
    "\1\0\1\5\1\42\3\5\2\7\7\5\1\1\1\0"+
    "\1\1\2\0\1\1\1\11\1\1\1\43\1\44\2\5"+
    "\1\45\1\46\1\0\1\47\1\50\12\5\1\1\1\0"+
    "\1\1\2\5\1\0\1\51\3\5\1\0\2\5\1\0"+
    "\1\52\1\5";

  private static int [] zzUnpackAction() {
    int [] result = new int[141];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\71\0\162\0\253\0\344\0\u011d\0\u0156\0\u018f"+
    "\0\u01c8\0\u0201\0\u023a\0\u0273\0\u02ac\0\u02e5\0\u031e\0\u0357"+
    "\0\u0390\0\u02e5\0\u03c9\0\u0402\0\u043b\0\u0474\0\u04ad\0\u04e6"+
    "\0\u051f\0\u0558\0\u0591\0\u05ca\0\u0603\0\u063c\0\u02e5\0\u0675"+
    "\0\u06ae\0\u06e7\0\u0720\0\u0759\0\u0792\0\u02e5\0\u07cb\0\u02e5"+
    "\0\u02e5\0\u02e5\0\u0804\0\u083d\0\u02e5\0\u02e5\0\u02e5\0\u02e5"+
    "\0\u02e5\0\u02e5\0\u02e5\0\u02e5\0\u0876\0\u08af\0\u08e8\0\u02e5"+
    "\0\u0921\0\u095a\0\u02e5\0\u0993\0\u02e5\0\u07cb\0\u09cc\0\u0a05"+
    "\0\u0a3e\0\u0a77\0\u02e5\0\u0ab0\0\u02e5\0\u02e5\0\u0ae9\0\u0b22"+
    "\0\u02e5\0\u02e5\0\u0b5b\0\u0b94\0\u02e5\0\u0bcd\0\u02e5\0\u0c06"+
    "\0\u0c3f\0\u0c3f\0\u0c78\0\u0cb1\0\u0cea\0\u03c9\0\u0d23\0\u0d5c"+
    "\0\u0d95\0\u0dce\0\u03c9\0\u0e07\0\u0e40\0\u0e79\0\u0eb2\0\u0eeb"+
    "\0\u0f24\0\u0f5d\0\u0f96\0\u0fcf\0\u0675\0\u1008\0\u1041\0\u107a"+
    "\0\u10b3\0\u02e5\0\u02e5\0\u02e5\0\u10ec\0\u1125\0\u02e5\0\u02e5"+
    "\0\u115e\0\u1197\0\u02e5\0\u11d0\0\u1209\0\u1242\0\u127b\0\u12b4"+
    "\0\u12ed\0\u1326\0\u135f\0\u1398\0\u13d1\0\u1008\0\u140a\0\u0759"+
    "\0\u1443\0\u147c\0\u1197\0\u03c9\0\u14b5\0\u14ee\0\u1527\0\u1560"+
    "\0\u1599\0\u15d2\0\u160b\0\u03c9\0\u1644";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[141];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\16\1\17\1\20\1\21\1\17\1\22\2\23\1\24"+
    "\1\25\1\26\1\23\1\27\1\30\1\31\1\32\1\33"+
    "\1\23\1\34\1\35\2\23\1\36\1\23\1\37\1\40"+
    "\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\50"+
    "\1\51\1\52\1\53\1\54\1\22\1\55\1\56\1\16"+
    "\1\57\1\60\1\61\1\16\1\62\1\63\1\64\1\65"+
    "\1\66\1\67\1\23\1\50\1\70\1\71\1\41\1\16"+
    "\1\17\1\20\1\21\1\17\1\22\2\23\1\24\1\25"+
    "\1\26\1\23\1\27\1\30\1\31\1\32\1\33\1\23"+
    "\1\34\1\35\2\23\1\36\1\23\1\37\1\40\1\72"+
    "\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51"+
    "\1\52\1\53\1\54\1\22\1\55\1\56\1\16\1\57"+
    "\1\60\1\61\1\16\1\62\1\63\1\64\1\65\1\66"+
    "\1\67\1\23\1\50\1\73\1\74\1\72\66\16\1\0"+
    "\2\16\40\75\1\76\1\77\25\75\1\100\1\75\31\101"+
    "\1\102\3\101\1\103\1\104\32\101\1\16\1\17\1\20"+
    "\1\21\1\17\1\22\2\23\1\24\1\25\1\26\1\23"+
    "\1\27\1\30\1\31\1\32\1\33\1\23\1\34\1\35"+
    "\2\23\1\36\1\23\1\37\1\40\1\41\1\42\1\43"+
    "\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\53"+
    "\1\54\1\22\1\55\1\56\1\105\1\57\1\60\1\61"+
    "\1\16\1\62\1\63\1\64\1\65\1\66\1\67\1\23"+
    "\1\50\1\70\1\71\1\41\1\16\1\17\1\20\1\21"+
    "\1\17\1\22\2\23\1\24\1\25\1\26\1\23\1\27"+
    "\1\30\1\31\1\32\1\33\1\23\1\34\1\35\2\23"+
    "\1\36\1\23\1\37\1\40\1\72\1\42\1\43\1\44"+
    "\1\45\1\46\1\47\1\50\1\51\1\52\1\53\1\54"+
    "\1\22\1\55\1\56\1\105\1\57\1\60\1\61\1\16"+
    "\1\62\1\63\1\64\1\65\1\66\1\67\1\23\1\50"+
    "\1\73\1\74\1\72\66\106\1\41\1\107\1\106\1\16"+
    "\1\17\1\20\1\21\1\17\1\22\2\23\1\24\1\25"+
    "\1\26\1\23\1\27\1\30\1\31\1\32\1\33\1\23"+
    "\1\34\1\35\2\23\1\36\1\23\1\37\1\40\1\110"+
    "\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51"+
    "\1\52\1\53\1\54\1\22\1\55\1\111\1\16\1\57"+
    "\1\60\1\61\1\112\1\62\1\63\1\64\1\65\1\66"+
    "\1\67\1\23\1\50\2\113\1\110\1\16\1\17\1\20"+
    "\1\21\1\17\1\22\2\23\1\24\1\25\1\26\1\23"+
    "\1\27\1\30\1\31\1\32\1\33\1\23\1\34\1\35"+
    "\2\23\1\36\1\23\1\37\1\40\1\114\1\42\1\43"+
    "\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\53"+
    "\1\54\1\22\1\55\1\111\1\16\1\57\1\60\1\61"+
    "\1\112\1\62\1\63\1\64\1\65\1\66\1\67\1\23"+
    "\1\50\2\113\1\114\6\115\2\116\1\115\17\116\31\115"+
    "\4\116\1\115\1\0\2\115\1\16\1\17\1\20\1\21"+
    "\1\17\1\22\2\23\1\24\1\25\1\26\1\23\1\27"+
    "\1\30\1\31\1\32\1\33\1\23\1\34\1\35\2\23"+
    "\1\36\1\23\1\37\1\40\1\110\1\42\1\43\1\44"+
    "\1\45\1\46\1\47\1\50\1\51\1\52\1\53\1\54"+
    "\1\22\1\55\1\111\1\117\1\57\1\60\1\61\1\16"+
    "\1\62\1\63\1\64\1\65\1\66\1\67\1\23\1\50"+
    "\2\113\1\110\1\16\1\17\1\20\1\21\1\17\1\22"+
    "\2\23\1\24\1\25\1\26\1\23\1\27\1\30\1\31"+
    "\1\32\1\33\1\23\1\34\1\35\2\23\1\36\1\23"+
    "\1\37\1\40\1\114\1\42\1\43\1\44\1\45\1\46"+
    "\1\47\1\50\1\51\1\52\1\53\1\54\1\22\1\55"+
    "\1\111\1\117\1\57\1\60\1\61\1\16\1\62\1\63"+
    "\1\64\1\65\1\66\1\67\1\23\1\50\2\113\1\114"+
    "\72\0\4\120\1\121\1\122\1\120\1\123\17\122\31\0"+
    "\3\122\6\0\4\17\1\121\1\122\1\120\1\123\17\122"+
    "\31\0\3\122\6\0\1\120\1\17\1\120\1\17\1\121"+
    "\1\122\1\120\1\123\17\122\31\0\3\122\6\0\4\23"+
    "\1\0\2\23\1\0\17\23\31\0\5\23\13\0\1\124"+
    "\61\0\4\23\1\0\2\23\1\0\1\23\1\125\2\23"+
    "\1\126\12\23\31\0\5\23\4\0\4\23\1\0\2\23"+
    "\1\0\1\127\16\23\31\0\5\23\4\0\4\23\1\0"+
    "\2\23\1\0\4\23\1\130\12\23\31\0\5\23\4\0"+
    "\4\23\1\0\2\23\1\0\1\126\6\23\1\131\2\23"+
    "\1\132\4\23\31\0\5\23\4\0\4\23\1\0\2\23"+
    "\1\0\1\133\11\23\1\133\4\23\31\0\5\23\4\0"+
    "\4\23\1\0\2\23\1\0\4\23\1\133\4\23\1\134"+
    "\5\23\31\0\5\23\4\0\4\23\1\0\2\23\1\0"+
    "\10\23\1\135\5\23\1\136\31\0\5\23\4\0\4\23"+
    "\1\0\2\23\1\0\2\23\1\137\14\23\31\0\5\23"+
    "\4\0\4\23\1\0\2\23\1\0\4\23\1\140\6\23"+
    "\1\141\3\23\31\0\5\23\4\0\4\23\1\0\2\23"+
    "\1\0\11\23\1\142\5\23\31\0\5\23\3\0\32\143"+
    "\1\144\15\143\2\0\1\143\1\0\1\143\2\0\7\143"+
    "\1\41\1\107\1\145\32\0\1\41\35\0\1\41\31\146"+
    "\1\147\1\146\1\150\35\146\35\0\1\44\33\0\31\44"+
    "\1\151\3\44\1\152\1\0\32\44\66\45\1\0\2\45"+
    "\41\0\1\153\73\0\1\154\71\0\1\154\24\0\4\23"+
    "\1\0\2\23\1\0\2\23\1\155\14\23\31\0\5\23"+
    "\4\0\4\23\1\0\2\23\1\0\16\23\1\156\31\0"+
    "\5\23\4\0\4\23\1\0\2\23\1\0\15\23\1\133"+
    "\1\23\31\0\5\23\71\0\1\70\2\0\32\157\1\72"+
    "\33\157\1\73\1\74\1\72\66\0\1\73\42\0\1\160"+
    "\116\0\1\75\2\0\31\101\1\102\3\101\1\0\1\161"+
    "\63\101\1\102\4\101\1\161\32\101\37\0\1\162\63\0"+
    "\1\41\33\0\1\41\1\0\1\41\32\0\1\110\33\0"+
    "\2\113\1\110\32\0\1\113\33\0\3\113\32\157\1\114"+
    "\33\157\2\113\1\114\1\0\4\116\1\0\2\116\1\0"+
    "\17\116\31\0\5\116\4\0\4\120\1\0\1\122\1\120"+
    "\1\123\17\122\31\0\3\122\6\0\4\122\1\0\1\122"+
    "\2\0\17\122\31\0\3\122\6\0\4\123\1\0\1\122"+
    "\1\123\1\0\17\122\31\0\3\122\15\0\1\163\61\0"+
    "\4\23\1\0\2\23\1\0\2\23\1\164\14\23\31\0"+
    "\5\23\4\0\4\23\1\0\2\23\1\0\2\23\1\165"+
    "\14\23\31\0\5\23\4\0\4\23\1\0\2\23\1\0"+
    "\5\23\1\166\11\23\31\0\5\23\4\0\4\23\1\0"+
    "\2\23\1\0\16\23\1\167\31\0\5\23\4\0\4\23"+
    "\1\0\2\23\1\0\12\23\1\126\4\23\31\0\5\23"+
    "\4\0\4\23\1\0\2\23\1\0\2\23\1\170\14\23"+
    "\31\0\5\23\4\0\4\23\1\0\2\23\1\0\1\23"+
    "\1\171\15\23\31\0\5\23\4\0\4\23\1\0\2\23"+
    "\1\0\5\23\1\172\3\23\1\173\5\23\31\0\5\23"+
    "\4\0\4\23\1\0\2\23\1\0\14\23\1\174\2\23"+
    "\31\0\5\23\4\0\4\23\1\0\2\23\1\0\10\23"+
    "\1\133\6\23\31\0\5\23\4\0\4\23\1\0\2\23"+
    "\1\0\2\23\1\175\14\23\31\0\5\23\4\0\4\23"+
    "\1\0\2\23\1\0\14\23\1\126\2\23\31\0\5\23"+
    "\3\0\32\143\1\0\15\143\2\0\1\143\1\0\1\143"+
    "\2\0\7\143\2\0\1\143\32\0\1\144\33\0\1\41"+
    "\1\107\1\144\31\146\1\147\1\146\1\152\66\146\1\147"+
    "\1\146\1\176\35\146\33\0\1\177\35\0\31\44\1\151"+
    "\3\44\1\200\1\0\32\44\1\0\4\23\1\0\2\23"+
    "\1\0\13\23\1\201\3\23\31\0\5\23\4\0\4\23"+
    "\1\0\2\23\1\0\5\23\1\202\11\23\31\0\5\23"+
    "\42\0\1\203\102\0\1\101\20\0\4\23\1\0\2\23"+
    "\1\0\2\23\1\204\14\23\31\0\5\23\4\0\4\23"+
    "\1\0\2\23\1\0\11\23\1\205\5\23\31\0\5\23"+
    "\4\0\4\23\1\0\2\23\1\0\6\23\1\204\10\23"+
    "\31\0\5\23\4\0\4\23\1\0\2\23\1\0\11\23"+
    "\1\206\5\23\31\0\5\23\4\0\4\23\1\0\2\23"+
    "\1\0\11\23\1\207\5\23\31\0\5\23\4\0\4\23"+
    "\1\0\2\23\1\0\11\23\1\126\5\23\31\0\5\23"+
    "\4\0\4\23\1\0\2\23\1\0\14\23\1\133\2\23"+
    "\31\0\5\23\4\0\4\23\1\0\2\23\1\0\1\133"+
    "\16\23\31\0\5\23\4\0\4\23\1\0\2\23\1\0"+
    "\11\23\1\133\5\23\31\0\5\23\4\0\4\23\1\0"+
    "\2\23\1\0\14\23\1\171\2\23\31\0\5\23\3\0"+
    "\33\177\1\210\35\177\1\0\4\23\1\0\2\23\1\0"+
    "\14\23\1\211\2\23\31\0\5\23\4\0\4\23\1\0"+
    "\2\23\1\0\2\23\1\174\14\23\31\0\5\23\4\0"+
    "\4\23\1\0\2\23\1\0\14\23\1\172\2\23\31\0"+
    "\5\23\4\0\4\23\1\0\2\23\1\0\10\23\1\212"+
    "\6\23\31\0\5\23\4\0\4\23\1\0\2\23\1\0"+
    "\7\23\1\174\7\23\31\0\5\23\36\0\1\213\36\0"+
    "\4\23\1\0\2\23\1\0\14\23\1\214\2\23\31\0"+
    "\5\23\4\0\4\23\1\0\2\23\1\0\17\23\31\0"+
    "\1\23\1\215\3\23\36\0\1\152\36\0\4\23\1\0"+
    "\2\23\1\0\5\23\1\137\11\23\31\0\5\23\3\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[5757];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\4\0\1\1\10\0\1\11\3\1\1\11\14\1\1\11"+
    "\6\1\1\11\1\1\3\11\2\1\10\11\3\1\1\11"+
    "\2\1\1\11\1\1\1\11\5\1\1\11\1\1\2\11"+
    "\2\1\2\11\2\1\1\11\1\1\1\11\1\1\1\0"+
    "\2\1\1\0\17\1\1\0\1\1\2\0\2\1\3\11"+
    "\2\1\2\11\1\0\1\1\1\11\13\1\1\0\3\1"+
    "\1\0\4\1\1\0\2\1\1\0\2\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[141];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    /**
     * Stack for keeping track of lexical states.
     */
    private Stack<Integer> _states = new Stack<Integer>();

    /**
     * Are indents tabs instead of spaces?
     */
    private static Boolean _tabIndents = null;

    /**
     * Current indent baseline.
     */
    private static int _currentIndent = 0;


    private void _switchToState(int state) {
        System.out.println("Switching to state " + _stateName(state) + ".");
        yybegin(state);
    }

    /**
     * Enter a lexical state and push the previous one to the stack.
     */
    private void _enterState(int state) {
        //System.out.println("Entering state " + _stateName(state) + ".");
        _states.push(yystate());
        yybegin(state);
    }

    /**
     * Leave a lexical state and return to the previous one (if any).
     * @returns boolean True if state was switched to a previous one, false if already at YYINITIAL.
     */
    private boolean _exitState() {
        if (_states.empty()) {
            //System.out.println("State stack empty, defaulting to YYINITIAL.");
            yybegin(YYINITIAL);
            return false;
        }
        else {
            int newState = _states.pop();
            //System.out.println("Exiting state " + _stateName(yystate()) + ", state is now " + _stateName(newState));
            yybegin(newState);
            return true;
        }
    }

    /**
     * Move the input position back to the start of the matched string.
     */
    private void _rewind() {
        yypushback(yylength());
    }

    /**
     * Move input position backwards.
     */
    private void _rewindBy(int count) {
        yypushback(count);
    }

    private void _advanceBy(int count) {
        _rewindBy(-count);
    }

    /**
     * Move the input position back to the first position of a given string
     */
    private boolean _rewindTo(String text) {
        final int position = yytext().toString().indexOf(text);

        if (position != -1) {
          _rewindBy(position);
          return true;
        }

        return false;
    }

    private IElementType _out(IElementType input) {
        //System.out.println("Matched [" + yytext() + "] as " + input);
        return input;
    }
    private String[] _stateNames = new String[] {
        "YYINITIAL",
        "INDENTED",
        "BLOCK_STATEMENT",
        "COMMENT_BLOCK",
        "DSTRING",
        "ISTRING",
        "VSTRING",
        "STRING_SUSPENDED",
        "REGEX",
        "SPLIT_OP",
        "LIST",
        "STRING_VAR",
        "OBJECT",
    };
    private String _stateName(int state) {
        return _stateNames[state / 2];
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public LiveScriptLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 150) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
        System.out.println("End of file reached, clearing out state stack.");
    _states.clear();
    return;

    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      if (zzMarkedPosL > zzStartRead) {
        switch ((zzBufferArrayL != null ? zzBufferArrayL[zzMarkedPosL-1] : zzBufferL.charAt(zzMarkedPosL-1))) {
        case '\n':
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          zzAtBOL = true;
          break;
        case '\r': 
          if (zzMarkedPosL < zzEndReadL)
            zzAtBOL = (zzBufferArrayL != null ? zzBufferArrayL[zzMarkedPosL] : zzBufferL.charAt(zzMarkedPosL)) != '\n';
          else if (zzAtEOF)
            zzAtBOL = false;
          else {
            boolean eof = zzRefill();
            zzMarkedPosL = zzMarkedPos;
            zzEndReadL = zzEndRead;
            zzBufferL = zzBuffer;
            if (eof) 
              zzAtBOL = false;
            else 
              zzAtBOL = (zzBufferArrayL != null ? zzBufferArrayL[zzMarkedPosL] : zzBufferL.charAt(zzMarkedPosL)) != '\n';
          }
          break;
        default:
          zzAtBOL = false;
        }
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      if (zzAtBOL)
        zzState = ZZ_LEXSTATE[zzLexicalState+1];
      else
        zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 14: 
          { return _out(LiveScriptTypes.ASSIGN);
          }
        case 43: break;
        case 22: 
          { return _out(LiveScriptTypes.Q);
          }
        case 44: break;
        case 32: 
          { _exitState(); return _out(LiveScriptTypes.IDENTIFIER);
          }
        case 45: break;
        case 29: 
          { return _out(LiveScriptTypes.SEPARATOR);
          }
        case 46: break;
        case 6: 
          { return _out(LiveScriptTypes.DOT);
          }
        case 47: break;
        case 19: 
          { _enterState(LIST); return _out(LiveScriptTypes.LIST_START);
          }
        case 48: break;
        case 37: 
          { _rewindBy(1); return _out(LiveScriptTypes.INDENT);
          }
        case 49: break;
        case 17: 
          { return _out(LiveScriptTypes.PAREN_L);
          }
        case 50: break;
        case 13: 
          { _enterState(SPLIT_OP); return _out(LiveScriptTypes.PLUS);
          }
        case 51: break;
        case 20: 
          { return _out(LiveScriptTypes.SEMICOLON);
          }
        case 52: break;
        case 36: 
          { return _out(LiveScriptTypes.LOGIC_OP);
          }
        case 53: break;
        case 16: 
          { return _out(LiveScriptTypes.COMMA);
          }
        case 54: break;
        case 27: 
          { _exitState(); return _out(LiveScriptTypes.ISTRING);
          }
        case 55: break;
        case 38: 
          { _exitState(); return _out(LiveScriptTypes.COMMENT_BLOCK);
          }
        case 56: break;
        case 5: 
          { return _out(LiveScriptTypes.IDENTIFIER);
          }
        case 57: break;
        case 30: 
          { _exitState(); return _out(LiveScriptTypes.LIST_END);
          }
        case 58: break;
        case 35: 
          { _enterState(COMMENT_BLOCK); return _out(LiveScriptTypes.COMMENT_BLOCK);
          }
        case 59: break;
        case 40: 
          { return _out(LiveScriptTypes.YADA);
          }
        case 60: break;
        case 42: 
          { return _out(LiveScriptTypes.CLASS);
          }
        case 61: break;
        case 23: 
          { return _out(LiveScriptTypes.NEWLINE);
          }
        case 62: break;
        case 18: 
          { return _out(LiveScriptTypes.PAREN_R);
          }
        case 63: break;
        case 41: 
          { return _out(LiveScriptTypes.EMPTY);
          }
        case 64: break;
        case 10: 
          { return _out(LiveScriptTypes.COMMENT_LINE);
          }
        case 65: break;
        case 3: 
          { return _out(LiveScriptTypes.NUMBER);
          }
        case 66: break;
        case 2: 
          { System.out.println("State is " + _stateName(yystate())); return _out(TokenType.BAD_CHARACTER);
          }
        case 67: break;
        case 1: 
          { return _out(LiveScriptTypes.STRING);
          }
        case 68: break;
        case 28: 
          { _rewindBy(1); _exitState();
          }
        case 69: break;
        case 33: 
          { _exitState(); return _out(LiveScriptTypes.OBJ_END);
          }
        case 70: break;
        case 9: 
          { _enterState(DSTRING); return _out(LiveScriptTypes.STRING_START);
          }
        case 71: break;
        case 26: 
          { _enterState(STRING_VAR); return _out(LiveScriptTypes.ESCAPE_CHAR);
          }
        case 72: break;
        case 24: 
          { return _out(LiveScriptTypes.COMMENT_BLOCK);
          }
        case 73: break;
        case 8: 
          { return _out(TokenType.WHITE_SPACE);
          }
        case 74: break;
        case 4: 
          { return _out(LiveScriptTypes.MISC_OP);
          }
        case 75: break;
        case 25: 
          { _exitState(); return _out(LiveScriptTypes.STRING_END);
          }
        case 76: break;
        case 34: 
          { return _out(LiveScriptTypes.BOOLEAN);
          }
        case 77: break;
        case 15: 
          { return _out(LiveScriptTypes.COLON);
          }
        case 78: break;
        case 39: 
          { _enterState(ISTRING); return _out(LiveScriptTypes.ISTRING);
          }
        case 79: break;
        case 11: 
          { _enterState(OBJECT); return _out(LiveScriptTypes.OBJ_START);
          }
        case 80: break;
        case 31: 
          { _exitState(); _rewindBy(1);
          }
        case 81: break;
        case 21: 
          { return _out(LiveScriptTypes.BANG);
          }
        case 82: break;
        case 7: 
          { return _out(LiveScriptTypes.KEYWORD);
          }
        case 83: break;
        case 12: 
          { _enterState(SPLIT_OP); return _out(LiveScriptTypes.MATH_OP);
          }
        case 84: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
