{
  parserClass="com.simpleplugin.parser.LiveScriptParser"

  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="LiveScript"
  psiImplClassSuffix="Impl"
  psiPackage="com.simpleplugin.psi"
  psiImplPackage="com.simpleplugin.psi.impl"

  elementTypeHolderClass="com.simpleplugin.psi.LiveScriptTypes"
  elementTypeClass="com.simpleplugin.psi.LiveScriptElementType"
  tokenTypeClass="com.simpleplugin.psi.LiveScriptTokenType"

  parserUtilClass="com.simpleplugin.psi.LiveScriptParserUtil"

  extends(".*Expression$")=Expression
}

file ::= (Statement | COMMENT | NEWLINE)* <<eof>>

external objDef ::= objDef

private recover_statement ::= !NEWLINE
private recover_inter ::= !(NEWLINE | STRING_INTER_END)

Statement ::= Expression {recoverWhile="recover_statement"}

InterLines ::= Expression* {recoverWhile="recover_inter"}

BlockStatement ::= INDENT Statement+ DEDENT?

Expression ::= TestExpression
    | InterpolatedStringExpression
    | OpExpression
    | ObjDefExpression
    | PropDefExpression
    | LiteralExpression

PropDefExpression ::= Expression COLON Expression

ObjDefExpression ::= PropDefExpression (NewlineSeparator PropDefExpression)*

OpExpression ::= Expression OPERATOR Expression

LiteralExpression ::= RESERVED_LITERAL | IDENTIFIER | NUMBER | StringExpression

StringExpression ::= STRING_START string STRING_END | BACKSTRING | HEREDOC

TestExpression ::= TEST | COLON | CURL_L | CURL_R

InterStringExpression ::= STRING_START string STRING_INTER_START
    | STRING_INTER_END string STRING_INTER_START
    | STRING_INTER_END string STRING_END

InterpolatedStringExpression ::= InterStringExpression+ InterLines InterStringExpression+

// Pieces
Separator ::= COMMA | WHITE_SPACE+
NewlineSeparator ::= Separator | SPACE* NEWLINE SPACE*
private string ::= STRING* (IDENTIFIER | STRING)*
