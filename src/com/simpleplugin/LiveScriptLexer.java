/* The following code was generated by JFlex 1.4.3 on 15.1.3 23:16 */

package com.simpleplugin;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.simpleplugin.psi.LiveScriptTypes;
import com.intellij.psi.TokenType;
import com.intellij.util.containers.Stack;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 15.1.3 23:16 from the specification file
 * <tt>C:/home/martin/dev/misc/LiveScriptBrains/src/com/simpleplugin/LiveScript.flex</tt>
 */
public class LiveScriptLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int STRING_SUSPENDED = 12;
  public static final int YYINITIAL = 0;
  public static final int BLOCK_STATEMENT = 4;
  public static final int SIMPLE_STRING_STARTED = 6;
  public static final int INDENTED = 2;
  public static final int STRING_VARIABLE = 10;
  public static final int FULL_STRING_STARTED = 8;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  2,  1,  3,  4,  4,  5,  5,  6,  6,  7, 7
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\53\1\32\1\0\1\52\1\33\22\0\1\53\1\54\1\35"+
    "\1\47\1\45\1\34\1\57\1\31\1\43\1\44\1\51\1\36\1\40"+
    "\1\46\1\10\1\50\1\4\2\2\1\3\6\1\1\37\1\30\1\0"+
    "\1\36\2\0\1\55\4\6\1\61\15\6\1\62\1\60\6\6\1\0"+
    "\1\27\1\30\1\56\1\7\1\0\1\24\2\6\1\17\1\22\1\23"+
    "\2\6\1\16\2\6\1\13\1\6\1\11\1\15\2\6\1\21\1\25"+
    "\1\20\1\12\1\14\2\6\1\26\1\6\1\41\1\0\1\42\1\5"+
    "\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\10\0\1\1\3\2\1\3\1\4\6\3\1\1\1\5"+
    "\2\6\1\1\1\7\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\10\1\20\1\1\1\21\1\22"+
    "\1\21\1\1\1\21\1\1\2\23\1\24\4\23\1\25"+
    "\1\26\1\27\1\2\1\0\2\2\1\3\1\30\5\3"+
    "\1\31\4\0\5\32\1\0\1\23\1\33\1\34\1\2"+
    "\4\3\4\0\1\35\3\0\1\36\61\0\1\37";

  private static int [] zzUnpackAction() {
    int [] result = new int[142];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\63\0\146\0\231\0\314\0\377\0\u0132\0\u0165"+
    "\0\u0198\0\u01cb\0\u01fe\0\u0231\0\u0264\0\u0198\0\u0297\0\u02ca"+
    "\0\u02fd\0\u0330\0\u0363\0\u0396\0\u03c9\0\u03fc\0\u0198\0\u042f"+
    "\0\u0462\0\u0198\0\u0198\0\u0198\0\u0495\0\u0198\0\u0198\0\u0198"+
    "\0\u0198\0\u04c8\0\u04fb\0\u052e\0\u0561\0\u0594\0\u05c7\0\u05fa"+
    "\0\u062d\0\u0660\0\u0693\0\u06c6\0\u06f9\0\u0198\0\u072c\0\u075f"+
    "\0\u0792\0\u07c5\0\u07f8\0\u0198\0\u0198\0\u082b\0\u085e\0\u0891"+
    "\0\u08c4\0\u08f7\0\u0264\0\u092a\0\u095d\0\u0990\0\u09c3\0\u09f6"+
    "\0\u03c9\0\u0a29\0\u0a5c\0\u0a8f\0\u062d\0\u0594\0\u05c7\0\u0660"+
    "\0\u0198\0\u0693\0\u0693\0\u0ac2\0\u0af5\0\u0198\0\u085e\0\u0b28"+
    "\0\u0b5b\0\u0b8e\0\u0bc1\0\u0bf4\0\u0c27\0\u0c5a\0\u0c8d\0\u0a5c"+
    "\0\u0cc0\0\u0cf3\0\u0d26\0\u0cf3\0\u0d59\0\u0d8c\0\u0dbf\0\u0df2"+
    "\0\u0e25\0\u0e58\0\u0e8b\0\u0ebe\0\u0ef1\0\u0f24\0\u0f57\0\u0f8a"+
    "\0\u0fbd\0\u0ff0\0\u1023\0\u1056\0\u1089\0\u10bc\0\u10ef\0\u1122"+
    "\0\u1155\0\u1188\0\u11bb\0\u11ee\0\u1221\0\u1254\0\u1287\0\u12ba"+
    "\0\u12ed\0\u1320\0\u1353\0\u1386\0\u13b9\0\u13ec\0\u141f\0\u1452"+
    "\0\u1485\0\u14b8\0\u14eb\0\u151e\0\u1551\0\u1584\0\u15b7\0\u15ea"+
    "\0\u161d\0\u1650\0\u1683\0\u16b6\0\u16e9\0\u0198";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[142];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\11\1\12\1\13\1\14\1\12\1\11\2\15\1\16"+
    "\1\17\2\15\1\20\1\21\2\15\1\22\2\15\1\23"+
    "\2\15\1\24\1\25\1\11\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41"+
    "\1\15\1\33\1\42\1\43\1\33\2\44\1\45\3\11"+
    "\3\15\32\11\1\0\7\11\1\37\20\11\32\46\1\0"+
    "\1\11\13\46\1\47\2\46\1\50\1\51\41\46\1\0"+
    "\1\11\13\46\1\47\2\46\1\52\1\53\7\46\27\54"+
    "\1\55\1\54\1\56\31\54\27\57\1\60\4\57\1\61"+
    "\1\56\11\57\1\62\13\57\6\11\2\63\1\11\16\63"+
    "\3\11\1\0\7\11\1\37\2\11\1\63\12\11\3\63"+
    "\32\64\1\0\7\64\1\65\20\64\64\0\4\66\1\67"+
    "\1\70\1\66\1\71\16\70\31\0\3\70\1\0\4\12"+
    "\1\67\1\70\1\66\1\71\16\70\31\0\3\70\1\0"+
    "\1\66\1\12\1\66\1\12\1\67\1\70\1\66\1\71"+
    "\16\70\31\0\3\70\1\0\4\15\1\0\2\15\1\0"+
    "\16\15\16\0\2\15\11\0\3\15\1\0\4\15\1\0"+
    "\2\15\1\0\1\15\1\72\2\15\1\73\11\15\16\0"+
    "\2\15\11\0\3\15\1\0\4\15\1\0\2\15\1\0"+
    "\4\15\1\74\11\15\16\0\2\15\11\0\3\15\1\0"+
    "\4\15\1\0\2\15\1\0\1\73\11\15\1\75\3\15"+
    "\16\0\2\15\11\0\3\15\1\0\4\15\1\0\2\15"+
    "\1\0\10\15\1\76\5\15\16\0\2\15\11\0\3\15"+
    "\1\0\4\15\1\0\2\15\1\0\13\15\1\77\2\15"+
    "\16\0\2\15\11\0\3\15\1\0\4\15\1\0\2\15"+
    "\1\0\11\15\1\100\4\15\16\0\2\15\11\0\3\15"+
    "\30\101\1\0\1\101\2\0\4\101\1\0\1\101\1\0"+
    "\1\101\1\0\6\101\1\0\7\101\31\0\1\102\63\0"+
    "\1\27\65\0\1\32\77\0\2\35\7\0\32\42\1\0"+
    "\30\42\51\0\1\103\63\0\2\44\64\0\1\104\5\0"+
    "\32\46\1\0\30\46\32\47\1\0\30\47\32\46\1\0"+
    "\14\46\1\47\2\46\2\50\7\46\47\0\1\47\2\0"+
    "\2\105\7\0\32\106\1\0\1\46\13\106\1\107\2\106"+
    "\1\110\1\52\7\106\32\111\2\0\13\111\1\107\2\111"+
    "\1\112\1\113\7\111\27\54\1\55\1\54\1\0\60\54"+
    "\1\55\33\54\27\57\1\60\5\57\1\0\11\57\1\0"+
    "\42\57\1\60\4\57\1\114\55\57\1\60\5\57\1\56"+
    "\11\57\1\0\13\57\6\0\2\115\1\0\16\115\12\0"+
    "\1\116\3\0\1\115\12\0\3\115\1\0\4\63\1\0"+
    "\2\63\1\0\16\63\16\0\2\63\11\0\3\63\1\0"+
    "\4\66\1\0\1\70\1\66\1\71\16\70\31\0\3\70"+
    "\1\0\4\117\1\0\1\117\2\0\16\117\31\0\3\117"+
    "\6\0\1\70\2\0\16\70\31\0\3\70\1\0\4\71"+
    "\1\0\1\70\1\71\1\0\16\70\31\0\3\70\1\0"+
    "\4\15\1\0\2\15\1\0\2\15\1\120\13\15\16\0"+
    "\2\15\11\0\3\15\1\0\4\15\1\0\2\15\1\0"+
    "\5\15\1\121\10\15\16\0\2\15\11\0\3\15\1\0"+
    "\4\15\1\0\2\15\1\0\12\15\1\73\3\15\16\0"+
    "\2\15\11\0\3\15\1\0\4\15\1\0\2\15\1\0"+
    "\1\15\1\122\14\15\16\0\2\15\11\0\3\15\1\0"+
    "\4\15\1\0\2\15\1\0\2\15\1\123\13\15\16\0"+
    "\2\15\11\0\3\15\1\0\4\15\1\0\2\15\1\0"+
    "\14\15\1\73\1\15\16\0\2\15\11\0\3\15\31\0"+
    "\1\124\31\0\51\103\1\125\11\103\47\0\1\126\13\0"+
    "\27\57\1\60\17\57\1\0\13\57\1\0\4\115\1\0"+
    "\2\115\1\0\16\115\16\0\2\115\11\0\3\115\1\0"+
    "\4\15\1\0\2\15\1\0\2\15\1\73\13\15\16\0"+
    "\2\15\11\0\3\15\1\0\4\15\1\0\2\15\1\0"+
    "\6\15\1\73\7\15\16\0\2\15\11\0\3\15\1\0"+
    "\4\15\1\0\2\15\1\0\11\15\1\73\4\15\16\0"+
    "\2\15\11\0\3\15\1\0\4\15\1\0\2\15\1\0"+
    "\14\15\1\122\1\15\16\0\2\15\11\0\3\15\31\124"+
    "\1\127\31\124\50\103\1\130\1\125\11\103\45\0\1\131"+
    "\15\0\31\124\1\132\31\124\34\0\1\133\26\0\31\124"+
    "\1\134\31\124\56\0\1\135\63\0\1\136\54\0\1\137"+
    "\54\0\1\140\63\0\1\141\76\0\1\142\63\0\1\143"+
    "\62\0\1\144\62\0\1\145\62\0\1\146\62\0\1\147"+
    "\62\0\1\150\62\0\1\151\62\0\1\152\62\0\1\153"+
    "\63\0\1\154\61\0\1\155\63\0\1\156\61\0\1\157"+
    "\63\0\1\160\61\0\1\161\61\0\1\162\63\0\1\163"+
    "\63\0\1\164\60\0\1\165\63\0\1\166\63\0\1\167"+
    "\60\0\1\170\63\0\1\171\61\0\1\172\63\0\1\173"+
    "\61\0\1\174\62\0\1\175\62\0\1\176\62\0\1\177"+
    "\56\0\1\200\62\0\1\201\52\0\1\202\67\0\1\203"+
    "\54\0\1\204\73\0\1\205\52\0\1\206\73\0\1\207"+
    "\50\0\1\210\70\0\1\211\55\0\1\212\67\0\1\213"+
    "\54\0\1\214\66\0\1\215\62\0\1\216\13\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[5916];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\10\0\1\11\4\1\1\11\10\1\1\11\2\1\3\11"+
    "\1\1\4\11\14\1\1\11\5\1\2\11\1\1\1\0"+
    "\12\1\4\0\3\1\1\11\1\1\1\0\2\1\1\11"+
    "\5\1\4\0\1\1\3\0\1\1\61\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[142];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    /**
     * Stack for keeping track of lexical states.
     */
    private Stack<Integer> _states = new Stack<Integer>();

    /**
     * Are indents tabs instead of spaces?
     */
    private static Boolean _tabIndents = null;

    /**
     * Indent stack to keep track of indentation levels.
     */
    private static Stack<Integer> _indents = new Stack<Integer>();

    /**
     * Current indent baseline.
     */
    private static int _currentIndent = 0;

    /**
     * Are we currently inside an indented block?
     */
    private static boolean _isIndented = false;

    /**
     * Start a new indented block (increase indent).
     */
    private IElementType _parseIndent(int count) {
        if (count > _currentIndent) {
            _indents.push(_currentIndent);
            _currentIndent += count;
            _enterState(INDENTED);
            return _out(LiveScriptTypes.INDENT);
        }
        else if (count < _currentIndent) {
            if (!_indents.empty())
                _currentIndent = _indents.pop();
            _exitState();
            if (_currentIndent < 1) {
                _isIndented = false;
            }
            return _out(LiveScriptTypes.DEDENT);
        }
        return null;
    }

    /**
     * Enter a lexical state and push the previous one to the stack.
     */
    private void _enterState(int state) {
        System.out.println("Entering state " + state);
        _states.push(yystate());
        yybegin(state);
    }

    /**
     * Leave a lexical state and return to the previous one (if any).
     * @returns boolean True if state was switched to a previous one, false if already at YYINITIAL.
     */
    private boolean _exitState() {
        if (_states.empty()) {
            System.out.println("State stack empty, defaulting to YYINITIAL.");
            yybegin(YYINITIAL);
            return false;
        }
        else {
            System.out.println("Exiting state...");
            yybegin(_states.pop());
            return true;
        }
    }

    /**
     * Move the input position back to the start of the matched string.
     */
    private void _rewind() {
        yypushback(yylength());
    }

    /**
     * Move input position backwards.
     */
    private void _rewindBy(int count) {
        yypushback(count);
    }

    /**
     * Move the input position back to the first position of a given string
     */
    private boolean _rewindTo(String text) {
        final int position = yytext().toString().indexOf(text);

        if (position != -1) {
          _rewindBy(position);
          return true;
        }

        return false;
    }

    private IElementType _out(IElementType input) {
        System.out.println("Matched [" + yytext() + "] as " + input);
        return input;
    }


  public LiveScriptLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public LiveScriptLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 142) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
        System.out.println("End of file reached, clearing out indentation stack.");
    _currentIndent = 0;
    _indents.clear();
    return;

    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      if (zzMarkedPosL > zzStartRead) {
        switch ((zzBufferArrayL != null ? zzBufferArrayL[zzMarkedPosL-1] : zzBufferL.charAt(zzMarkedPosL-1))) {
        case '\n':
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          zzAtBOL = true;
          break;
        case '\r': 
          if (zzMarkedPosL < zzEndReadL)
            zzAtBOL = (zzBufferArrayL != null ? zzBufferArrayL[zzMarkedPosL] : zzBufferL.charAt(zzMarkedPosL)) != '\n';
          else if (zzAtEOF)
            zzAtBOL = false;
          else {
            boolean eof = zzRefill();
            zzMarkedPosL = zzMarkedPos;
            zzEndReadL = zzEndRead;
            zzBufferL = zzBuffer;
            if (eof) 
              zzAtBOL = false;
            else 
              zzAtBOL = (zzBufferArrayL != null ? zzBufferArrayL[zzMarkedPosL] : zzBufferL.charAt(zzMarkedPosL)) != '\n';
          }
          break;
        default:
          zzAtBOL = false;
        }
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      if (zzAtBOL)
        zzState = ZZ_LEXSTATE[zzLexicalState+1];
      else
        zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 17: 
          { System.out.println("I> text is [" + yytext() + "], dedenting");
            _rewind();
            return _parseIndent(0);
          }
        case 32: break;
        case 12: 
          { if (_exitState()) _rewindBy(1); else return LiveScriptTypes.CURL_R;
          }
        case 33: break;
        case 20: 
          { _exitState(); return LiveScriptTypes.STRING_END;
          }
        case 34: break;
        case 1: 
          { return TokenType.BAD_CHARACTER;
          }
        case 35: break;
        case 9: 
          { return LiveScriptTypes.COLON;
          }
        case 36: break;
        case 30: 
          { return LiveScriptTypes.HEREDOC;
          }
        case 37: break;
        case 19: 
          { return LiveScriptTypes.STRING;
          }
        case 38: break;
        case 18: 
          { _rewindTo("#"); _exitState(); return TokenType.WHITE_SPACE;
          }
        case 39: break;
        case 6: 
          { return _out(LiveScriptTypes.NEWLINE);
          }
        case 40: break;
        case 21: 
          { _exitState(); return LiveScriptTypes.IDENTIFIER;
          }
        case 41: break;
        case 4: 
          { return LiveScriptTypes.DOT;
          }
        case 42: break;
        case 2: 
          { return LiveScriptTypes.NUMBER;
          }
        case 43: break;
        case 16: 
          { return _out(TokenType.WHITE_SPACE);
          }
        case 44: break;
        case 13: 
          { return LiveScriptTypes.PAREN_L;
          }
        case 45: break;
        case 14: 
          { return LiveScriptTypes.PAREN_R;
          }
        case 46: break;
        case 23: 
          { _exitState(); return LiveScriptTypes.STRING_INTER_END;
          }
        case 47: break;
        case 11: 
          { return LiveScriptTypes.CURL_L;
          }
        case 48: break;
        case 5: 
          { _enterState(SIMPLE_STRING_STARTED); return LiveScriptTypes.STRING_START;
          }
        case 49: break;
        case 22: 
          { _rewindBy(1); _enterState(YYINITIAL);
          }
        case 50: break;
        case 7: 
          { _enterState(FULL_STRING_STARTED); return LiveScriptTypes.STRING_START;
          }
        case 51: break;
        case 27: 
          { _rewind(); _rewindBy(-1); _enterState(STRING_VARIABLE); return LiveScriptTypes.STRING;
          }
        case 52: break;
        case 29: 
          { return LiveScriptTypes.COMMENT_BLOCK;
          }
        case 53: break;
        case 31: 
          { return LiveScriptTypes.TEST;
          }
        case 54: break;
        case 26: 
          { System.out.println("State is " + yystate() + ", text is [" + yytext() + "]");
        _rewindBy(1);
        IElementType result = _parseIndent(yylength());
        if (result != null) return result;
          }
        case 55: break;
        case 8: 
          { return LiveScriptTypes.OPERATOR;
          }
        case 56: break;
        case 25: 
          { return LiveScriptTypes.BACKSTRING;
          }
        case 57: break;
        case 10: 
          { return LiveScriptTypes.COMMA;
          }
        case 58: break;
        case 28: 
          { _enterState(STRING_SUSPENDED); return LiveScriptTypes.STRING_INTER_START;
          }
        case 59: break;
        case 15: 
          { return LiveScriptTypes.COMMENT_LINE;
          }
        case 60: break;
        case 24: 
          { return LiveScriptTypes.RESERVED_LITERAL;
          }
        case 61: break;
        case 3: 
          { return _out(LiveScriptTypes.IDENTIFIER);
          }
        case 62: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
