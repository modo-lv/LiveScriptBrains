/* The following code was generated by JFlex 1.4.3 on 15.3.3 00:06 */

package com.simpleplugin;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.simpleplugin.psi.LiveScriptTypes;
import com.intellij.psi.TokenType;
import com.intellij.util.containers.Stack;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 15.3.3 00:06 from the specification file
 * <tt>C:/home/martin/dev/misc/LiveScriptBrains/src/com/simpleplugin/LiveScript.flex</tt>
 */
public class LiveScriptLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int STRING_SUSPENDED = 12;
  public static final int YYINITIAL = 0;
  public static final int BLOCK_STATEMENT = 4;
  public static final int REGEX = 14;
  public static final int SIMPLE_STRING_STARTED = 6;
  public static final int INDENTED = 2;
  public static final int STRING_VARIABLE = 10;
  public static final int FULL_STRING_STARTED = 8;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  0,  1,  2,  3,  4,  4,  5,  5,  6,  6,  7,  7,  8, 8
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\62\1\34\1\0\1\61\1\35\22\0\1\62\1\63\1\37"+
    "\1\57\1\55\1\36\1\65\1\33\1\51\1\52\1\60\1\43\1\46"+
    "\1\56\1\10\1\40\1\4\2\2\1\3\6\1\1\45\1\32\1\0"+
    "\1\44\2\0\1\30\4\6\1\67\15\6\1\70\1\66\6\6\1\53"+
    "\1\31\1\54\1\64\1\7\1\0\1\24\2\6\1\17\1\22\1\23"+
    "\1\41\1\27\1\16\2\6\1\13\1\42\1\11\1\15\2\6\1\21"+
    "\1\25\1\20\1\12\1\14\2\6\1\26\1\6\1\47\1\0\1\50"+
    "\1\5\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\11\0\1\1\3\2\1\3\1\4\6\3\1\5\1\1"+
    "\1\6\2\7\1\1\1\10\2\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\1\1\25\3\2\1\3\1\4\6\3\1\5\1\25"+
    "\1\6\1\25\1\10\2\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\2\24\1\25\1\1"+
    "\2\26\1\27\3\26\1\30\1\31\1\32\1\33\1\1"+
    "\1\0\1\1\1\2\1\0\2\2\1\3\1\34\6\3"+
    "\1\35\2\0\1\36\1\0\2\37\2\0\1\2\1\25"+
    "\2\2\1\3\1\34\6\3\1\35\2\25\1\36\1\25"+
    "\1\37\1\25\3\40\1\25\1\40\1\0\1\26\1\41"+
    "\1\42\1\0\1\43\1\44\1\2\5\3\1\0\2\45"+
    "\1\0\1\2\5\3\1\25\2\45\1\46\1\25\1\43"+
    "\3\44\1\47\1\0\3\45\1\0\3\45\2\0\1\47"+
    "\1\25\3\45\1\25\3\45\2\25\1\0\1\50\1\0"+
    "\1\25\1\50\1\25\1\51\1\0\1\51\1\25\1\0"+
    "\1\25\1\0\1\25\1\0\1\25\1\0\1\25\1\0"+
    "\1\25\1\0\1\25\1\0\1\25\1\0\1\25\1\0"+
    "\1\25\1\0\1\25\1\0\1\25\1\0\1\25\1\0"+
    "\1\25\1\0\1\25\1\0\1\25\1\0\1\25\1\0"+
    "\1\25\1\0\1\25\1\0\1\25\1\0\1\25\1\0"+
    "\1\25\1\0\1\25\1\0\1\25\1\0\1\25\1\0"+
    "\1\25\1\0\1\25\1\0\1\25\1\0\1\25\1\0"+
    "\1\25\1\0\1\25\1\0\1\25\1\0\1\25\1\0"+
    "\1\25\1\0\1\25\1\0\1\25\1\0\1\25\1\0"+
    "\1\25\1\0\1\25\1\0\1\25\1\0\1\25\1\0"+
    "\1\25\1\0\1\25\1\0\1\25\1\0\1\25\1\0"+
    "\1\25\1\0\1\25\1\0\1\25\1\0\1\25\2\52";

  private static int [] zzUnpackAction() {
    int [] result = new int[294];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\71\0\162\0\253\0\344\0\u011d\0\u0156\0\u018f"+
    "\0\u01c8\0\u0201\0\u023a\0\u0273\0\u02ac\0\u02e5\0\u0201\0\u031e"+
    "\0\u0357\0\u0390\0\u03c9\0\u0402\0\u043b\0\u0201\0\u0474\0\u04ad"+
    "\0\u0201\0\u04e6\0\u051f\0\u0201\0\u0558\0\u0201\0\u0591\0\u0201"+
    "\0\u05ca\0\u0201\0\u0201\0\u0201\0\u0201\0\u0201\0\u0201\0\u0603"+
    "\0\u063c\0\u0675\0\u06ae\0\u06e7\0\u0720\0\u0759\0\u0792\0\u06ae"+
    "\0\u07cb\0\u0804\0\u083d\0\u0876\0\u08af\0\u08e8\0\u06ae\0\u0921"+
    "\0\u095a\0\u0993\0\u06ae\0\u09cc\0\u06ae\0\u0a05\0\u06ae\0\u0a3e"+
    "\0\u06ae\0\u06ae\0\u06ae\0\u06ae\0\u06ae\0\u06ae\0\u0a77\0\u0ab0"+
    "\0\u0ae9\0\u0b22\0\u0b5b\0\u0b94\0\u0201\0\u0bcd\0\u0c06\0\u0c3f"+
    "\0\u0c78\0\u0cb1\0\u0201\0\u0201\0\u0cea\0\u0cea\0\u0d23\0\u0d5c"+
    "\0\u0d95\0\u0dce\0\u0e07\0\u0e40\0\u02e5\0\u0e79\0\u0eb2\0\u0eeb"+
    "\0\u0f24\0\u0f5d\0\u0f96\0\u0474\0\u0fcf\0\u1008\0\u0201\0\u1041"+
    "\0\u0201\0\u107a\0\u0591\0\u10b3\0\u10ec\0\u1125\0\u115e\0\u1197"+
    "\0\u11d0\0\u0792\0\u1209\0\u1242\0\u127b\0\u12b4\0\u12ed\0\u1326"+
    "\0\u0921\0\u135f\0\u1398\0\u06ae\0\u13d1\0\u140a\0\u0a05\0\u06ae"+
    "\0\u1443\0\u0201\0\u147c\0\u0b22\0\u0b22\0\u14b5\0\u14ee\0\u0201"+
    "\0\u1527\0\u0201\0\u1560\0\u0d95\0\u1599\0\u15d2\0\u160b\0\u1644"+
    "\0\u167d\0\u16b6\0\u16ef\0\u1728\0\u1761\0\u1125\0\u179a\0\u17d3"+
    "\0\u180c\0\u1845\0\u187e\0\u18b7\0\u18f0\0\u1929\0\u1443\0\u1962"+
    "\0\u199b\0\u0201\0\u19d4\0\u1a0d\0\u02e5\0\u1a46\0\u0201\0\u1a7f"+
    "\0\u1ab8\0\u1af1\0\u1af1\0\u1b2a\0\u1b63\0\u1b9c\0\u1bd5\0\u0792"+
    "\0\u1c0e\0\u06ae\0\u1c47\0\u1c80\0\u1cb9\0\u1cb9\0\u1cf2\0\u1d2b"+
    "\0\u1d64\0\u1d9d\0\u1dd6\0\u1af1\0\u1e0f\0\u1e48\0\u1cb9\0\u1e81"+
    "\0\u1dd6\0\u1eba\0\u1e48\0\u1ef3\0\u1f2c\0\u1f65\0\u1f9e\0\u1fd7"+
    "\0\u2010\0\u2049\0\u2082\0\u20bb\0\u20f4\0\u212d\0\u2166\0\u219f"+
    "\0\u21d8\0\u2211\0\u224a\0\u2283\0\u22bc\0\u22f5\0\u232e\0\u2367"+
    "\0\u23a0\0\u23d9\0\u2412\0\u244b\0\u2484\0\u24bd\0\u24f6\0\u252f"+
    "\0\u2568\0\u25a1\0\u25da\0\u2613\0\u264c\0\u2685\0\u26be\0\u26f7"+
    "\0\u2730\0\u2769\0\u27a2\0\u27db\0\u2814\0\u284d\0\u2886\0\u28bf"+
    "\0\u28f8\0\u2931\0\u296a\0\u29a3\0\u29dc\0\u2a15\0\u2a4e\0\u2a87"+
    "\0\u2ac0\0\u2af9\0\u2b32\0\u2b6b\0\u2ba4\0\u2bdd\0\u2c16\0\u2c4f"+
    "\0\u2c88\0\u2cc1\0\u2cfa\0\u2d33\0\u2d6c\0\u2da5\0\u2dde\0\u2e17"+
    "\0\u2e50\0\u2e89\0\u2ec2\0\u2efb\0\u2f34\0\u2f6d\0\u2fa6\0\u2fdf"+
    "\0\u3018\0\u3051\0\u308a\0\u30c3\0\u30fc\0\u3135\0\u316e\0\u31a7"+
    "\0\u31e0\0\u3219\0\u3252\0\u328b\0\u32c4\0\u32fd\0\u3336\0\u336f"+
    "\0\u33a8\0\u33e1\0\u341a\0\u3453\0\u0201\0\u06ae";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[294];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\12\1\13\1\14\1\15\1\13\1\12\2\16\1\17"+
    "\1\20\2\16\1\21\1\22\2\16\1\23\2\16\1\24"+
    "\2\16\1\25\1\16\1\26\1\27\1\12\1\30\1\31"+
    "\1\32\1\33\1\34\1\35\2\16\1\36\1\37\1\40"+
    "\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\16"+
    "\1\36\1\50\1\36\2\51\1\52\2\12\3\16\1\53"+
    "\1\54\1\55\1\56\1\54\1\53\2\57\1\60\1\61"+
    "\2\57\1\62\1\63\2\57\1\64\2\57\1\65\2\57"+
    "\1\66\1\57\1\67\1\70\1\53\1\71\1\31\1\32"+
    "\1\72\1\73\1\74\2\57\1\75\1\76\1\77\1\100"+
    "\1\101\1\102\1\103\1\104\1\105\1\106\1\57\1\75"+
    "\1\50\1\75\1\107\1\110\1\111\2\53\3\57\34\12"+
    "\1\0\70\12\1\0\24\12\2\112\6\12\31\113\1\114"+
    "\1\113\1\115\35\113\31\116\1\117\4\116\1\120\1\115"+
    "\17\116\1\121\11\116\6\12\2\122\1\12\17\122\4\12"+
    "\1\0\4\12\2\122\12\12\1\122\10\12\3\122\34\123"+
    "\1\0\13\123\1\124\20\123\34\125\1\126\3\125\1\127"+
    "\16\125\1\50\11\125\72\0\4\130\1\131\1\132\1\130"+
    "\1\133\17\132\11\0\2\132\23\0\3\132\1\0\4\13"+
    "\1\131\1\132\1\130\1\133\17\132\11\0\2\132\23\0"+
    "\3\132\1\0\1\130\1\13\1\130\1\13\1\131\1\132"+
    "\1\130\1\133\17\132\11\0\2\132\23\0\3\132\1\0"+
    "\4\16\1\0\2\16\1\0\17\16\11\0\2\16\12\0"+
    "\2\16\7\0\3\16\1\0\4\16\1\0\2\16\1\0"+
    "\1\16\1\134\2\16\1\135\12\16\11\0\2\16\12\0"+
    "\2\16\7\0\3\16\1\0\4\16\1\0\2\16\1\0"+
    "\4\16\1\136\12\16\11\0\2\16\12\0\2\16\7\0"+
    "\3\16\1\0\4\16\1\0\2\16\1\0\1\135\11\16"+
    "\1\137\4\16\11\0\2\16\12\0\2\16\7\0\3\16"+
    "\1\0\4\16\1\0\2\16\1\0\10\16\1\140\5\16"+
    "\1\141\11\0\2\16\12\0\2\16\7\0\3\16\1\0"+
    "\4\16\1\0\2\16\1\0\13\16\1\142\3\16\11\0"+
    "\2\16\12\0\2\16\7\0\3\16\1\0\4\16\1\0"+
    "\2\16\1\0\11\16\1\143\5\16\11\0\2\16\12\0"+
    "\2\16\7\0\3\16\32\144\1\0\1\144\2\0\10\144"+
    "\1\0\1\144\1\0\1\144\1\0\1\144\1\0\5\144"+
    "\1\0\6\144\33\0\1\145\71\0\1\31\73\0\1\34"+
    "\31\0\40\146\1\147\17\146\1\150\10\146\34\0\1\151"+
    "\1\152\23\0\2\153\67\0\2\41\6\0\34\50\1\0"+
    "\34\50\61\0\2\51\36\0\1\154\40\0\34\53\1\0"+
    "\35\53\4\155\1\156\1\157\1\155\1\160\17\157\4\53"+
    "\1\0\4\53\2\157\23\53\3\157\1\53\4\54\1\156"+
    "\1\157\1\155\1\160\17\157\4\53\1\0\4\53\2\157"+
    "\23\53\3\157\1\53\1\155\1\54\1\155\1\54\1\156"+
    "\1\157\1\155\1\160\17\157\4\53\1\0\4\53\2\157"+
    "\23\53\3\157\1\53\4\57\1\53\2\57\1\53\17\57"+
    "\4\53\1\0\4\53\2\57\12\53\2\57\7\53\3\57"+
    "\1\53\4\57\1\53\2\57\1\53\1\57\1\161\2\57"+
    "\1\162\12\57\4\53\1\0\4\53\2\57\12\53\2\57"+
    "\7\53\3\57\1\53\4\57\1\53\2\57\1\53\4\57"+
    "\1\163\12\57\4\53\1\0\4\53\2\57\12\53\2\57"+
    "\7\53\3\57\1\53\4\57\1\53\2\57\1\53\1\162"+
    "\11\57\1\164\4\57\4\53\1\0\4\53\2\57\12\53"+
    "\2\57\7\53\3\57\1\53\4\57\1\53\2\57\1\53"+
    "\10\57\1\165\5\57\1\166\4\53\1\0\4\53\2\57"+
    "\12\53\2\57\7\53\3\57\1\53\4\57\1\53\2\57"+
    "\1\53\13\57\1\167\3\57\4\53\1\0\4\53\2\57"+
    "\12\53\2\57\7\53\3\57\1\53\4\57\1\53\2\57"+
    "\1\53\11\57\1\170\5\57\4\53\1\0\4\53\2\57"+
    "\12\53\2\57\7\53\3\57\32\171\1\53\1\171\1\0"+
    "\1\53\10\171\1\53\1\171\1\53\1\171\1\53\1\171"+
    "\1\53\5\171\1\53\6\171\33\53\1\172\1\0\70\53"+
    "\1\0\2\53\1\73\31\53\34\173\1\146\3\173\1\174"+
    "\17\173\1\175\10\173\34\53\1\151\1\176\23\53\2\177"+
    "\42\53\1\0\24\53\2\100\6\53\34\200\1\0\1\53"+
    "\21\200\1\201\1\200\2\107\6\200\34\202\2\0\21\202"+
    "\1\201\1\202\2\110\6\202\30\53\1\203\3\53\1\0"+
    "\34\53\34\202\2\0\23\202\1\204\1\205\6\202\31\113"+
    "\1\114\1\113\1\0\66\113\1\114\37\113\31\116\1\117"+
    "\5\116\1\0\17\116\1\0\42\116\1\117\4\116\1\206"+
    "\63\116\1\117\5\116\1\115\17\116\1\0\11\116\6\0"+
    "\2\207\1\0\17\207\11\0\2\207\4\0\1\210\5\0"+
    "\1\207\10\0\3\207\1\0\4\122\1\0\2\122\1\0"+
    "\17\122\11\0\2\122\12\0\2\122\7\0\3\122\40\126"+
    "\1\211\16\126\1\212\51\126\1\213\16\126\1\212\11\126"+
    "\1\0\4\130\1\0\1\132\1\130\1\133\17\132\11\0"+
    "\2\132\23\0\3\132\1\0\4\214\1\0\1\214\2\0"+
    "\17\214\11\0\2\214\23\0\3\214\6\0\1\132\2\0"+
    "\17\132\11\0\2\132\23\0\3\132\1\0\4\133\1\0"+
    "\1\132\1\133\1\0\17\132\11\0\2\132\23\0\3\132"+
    "\1\0\4\16\1\0\2\16\1\0\2\16\1\215\14\16"+
    "\11\0\2\16\12\0\2\16\7\0\3\16\1\0\4\16"+
    "\1\0\2\16\1\0\5\16\1\216\11\16\11\0\2\16"+
    "\12\0\2\16\7\0\3\16\1\0\4\16\1\0\2\16"+
    "\1\0\12\16\1\135\4\16\11\0\2\16\12\0\2\16"+
    "\7\0\3\16\1\0\4\16\1\0\2\16\1\0\1\16"+
    "\1\217\15\16\11\0\2\16\12\0\2\16\7\0\3\16"+
    "\1\0\4\16\1\0\2\16\1\0\5\16\1\220\11\16"+
    "\11\0\2\16\12\0\2\16\7\0\3\16\1\0\4\16"+
    "\1\0\2\16\1\0\2\16\1\221\14\16\11\0\2\16"+
    "\12\0\2\16\7\0\3\16\1\0\4\16\1\0\2\16"+
    "\1\0\14\16\1\135\2\16\11\0\2\16\12\0\2\16"+
    "\7\0\3\16\33\0\1\222\35\0\40\146\1\223\30\146"+
    "\40\150\1\224\30\150\34\0\1\151\113\0\1\225\11\0"+
    "\1\53\4\155\1\53\1\157\1\155\1\160\17\157\4\53"+
    "\1\0\4\53\2\157\23\53\3\157\1\53\4\226\1\53"+
    "\1\226\2\53\17\226\4\53\1\0\4\53\2\226\23\53"+
    "\3\226\6\53\1\157\2\53\17\157\4\53\1\0\4\53"+
    "\2\157\23\53\3\157\1\53\4\160\1\53\1\157\1\160"+
    "\1\53\17\157\4\53\1\0\4\53\2\157\23\53\3\157"+
    "\1\53\4\57\1\53\2\57\1\53\2\57\1\227\14\57"+
    "\4\53\1\0\4\53\2\57\12\53\2\57\7\53\3\57"+
    "\1\53\4\57\1\53\2\57\1\53\5\57\1\230\11\57"+
    "\4\53\1\0\4\53\2\57\12\53\2\57\7\53\3\57"+
    "\1\53\4\57\1\53\2\57\1\53\12\57\1\162\4\57"+
    "\4\53\1\0\4\53\2\57\12\53\2\57\7\53\3\57"+
    "\1\53\4\57\1\53\2\57\1\53\1\57\1\231\15\57"+
    "\4\53\1\0\4\53\2\57\12\53\2\57\7\53\3\57"+
    "\1\53\4\57\1\53\2\57\1\53\5\57\1\232\11\57"+
    "\4\53\1\0\4\53\2\57\12\53\2\57\7\53\3\57"+
    "\1\53\4\57\1\53\2\57\1\53\2\57\1\233\14\57"+
    "\4\53\1\0\4\53\2\57\12\53\2\57\7\53\3\57"+
    "\1\53\4\57\1\53\2\57\1\53\14\57\1\162\2\57"+
    "\4\53\1\0\4\53\2\57\12\53\2\57\7\53\3\57"+
    "\33\53\1\234\1\0\34\53\34\173\1\146\3\173\1\235"+
    "\30\173\34\175\1\150\3\175\1\236\30\175\34\53\1\151"+
    "\34\53\34\237\1\0\34\237\34\53\1\0\22\53\1\240"+
    "\11\53\31\116\1\117\25\116\1\0\11\116\1\0\4\207"+
    "\1\0\2\207\1\0\17\207\11\0\2\207\12\0\2\207"+
    "\7\0\3\207\40\126\1\241\16\126\1\212\11\126\16\0"+
    "\1\242\21\0\1\212\1\243\1\244\27\0\4\16\1\0"+
    "\2\16\1\0\2\16\1\135\14\16\11\0\2\16\12\0"+
    "\2\16\7\0\3\16\1\0\4\16\1\0\2\16\1\0"+
    "\6\16\1\135\10\16\11\0\2\16\12\0\2\16\7\0"+
    "\3\16\1\0\4\16\1\0\2\16\1\0\11\16\1\135"+
    "\5\16\11\0\2\16\12\0\2\16\7\0\3\16\1\0"+
    "\4\16\1\0\2\16\1\0\14\16\1\245\2\16\11\0"+
    "\2\16\12\0\2\16\7\0\3\16\1\0\4\16\1\0"+
    "\2\16\1\0\14\16\1\217\2\16\11\0\2\16\12\0"+
    "\2\16\7\0\3\16\33\222\1\246\35\222\16\0\1\247"+
    "\22\0\1\250\1\251\26\0\16\252\1\253\22\252\1\254"+
    "\1\255\15\252\1\256\10\252\55\0\1\257\13\0\1\53"+
    "\4\57\1\53\2\57\1\53\2\57\1\162\14\57\4\53"+
    "\1\0\4\53\2\57\12\53\2\57\7\53\3\57\1\53"+
    "\4\57\1\53\2\57\1\53\6\57\1\162\10\57\4\53"+
    "\1\0\4\53\2\57\12\53\2\57\7\53\3\57\1\53"+
    "\4\57\1\53\2\57\1\53\11\57\1\162\5\57\4\53"+
    "\1\0\4\53\2\57\12\53\2\57\7\53\3\57\1\53"+
    "\4\57\1\53\2\57\1\53\14\57\1\260\2\57\4\53"+
    "\1\0\4\53\2\57\12\53\2\57\7\53\3\57\1\53"+
    "\4\57\1\53\2\57\1\53\14\57\1\231\2\57\4\53"+
    "\1\0\4\53\2\57\12\53\2\57\7\53\3\57\33\234"+
    "\1\261\1\222\34\234\16\53\1\262\15\53\1\0\4\53"+
    "\1\263\1\264\26\53\16\265\1\266\15\265\1\252\4\265"+
    "\1\267\1\270\15\265\1\271\10\265\34\53\1\0\20\53"+
    "\1\272\13\53\40\0\1\212\46\0\1\242\23\0\1\244"+
    "\44\0\1\242\52\0\33\222\1\273\35\222\16\0\1\247"+
    "\23\0\1\251\44\0\1\247\52\0\60\252\1\256\26\252"+
    "\1\253\23\252\1\255\15\252\1\256\26\252\1\253\41\252"+
    "\1\256\50\252\1\274\17\252\1\256\10\252\36\0\1\275"+
    "\32\0\33\234\1\276\1\222\34\234\16\53\1\262\15\53"+
    "\1\0\5\53\1\264\44\53\1\262\15\53\1\0\34\53"+
    "\34\265\1\252\23\265\1\271\26\265\1\266\15\265\1\252"+
    "\5\265\1\270\15\265\1\271\26\265\1\266\15\265\1\252"+
    "\23\265\1\271\44\265\1\252\3\265\1\277\17\265\1\271"+
    "\10\265\34\53\1\0\1\53\1\300\32\53\33\222\1\301"+
    "\35\222\64\0\1\302\4\0\33\234\1\303\1\222\34\234"+
    "\34\53\1\0\27\53\1\304\4\53\65\0\1\305\3\0"+
    "\34\53\1\0\30\53\1\306\3\53\60\0\1\307\10\0"+
    "\34\53\1\0\23\53\1\310\10\53\51\0\1\311\17\0"+
    "\34\53\1\0\14\53\1\312\17\53\52\0\1\313\16\0"+
    "\34\53\1\0\15\53\1\314\16\53\66\0\1\315\2\0"+
    "\34\53\1\0\31\53\1\316\2\53\67\0\1\317\1\0"+
    "\34\53\1\0\32\53\1\320\1\53\67\0\1\321\1\0"+
    "\34\53\1\0\32\53\1\322\1\53\67\0\1\323\1\0"+
    "\34\53\1\0\32\53\1\324\1\53\67\0\1\325\1\0"+
    "\34\53\1\0\32\53\1\326\1\53\67\0\1\327\1\0"+
    "\34\53\1\0\32\53\1\330\1\53\67\0\1\331\1\0"+
    "\34\53\1\0\32\53\1\332\1\53\67\0\1\333\1\0"+
    "\34\53\1\0\32\53\1\334\1\53\67\0\1\335\1\0"+
    "\34\53\1\0\32\53\1\336\1\53\67\0\1\337\1\0"+
    "\34\53\1\0\32\53\1\340\1\53\70\0\1\341\34\53"+
    "\1\0\33\53\1\342\67\0\1\343\1\0\34\53\1\0"+
    "\32\53\1\344\1\53\70\0\1\345\34\53\1\0\33\53"+
    "\1\346\67\0\1\347\1\0\34\53\1\0\32\53\1\350"+
    "\1\53\70\0\1\351\34\53\1\0\33\53\1\352\67\0"+
    "\1\353\1\0\34\53\1\0\32\53\1\354\1\53\66\0"+
    "\1\355\2\0\34\53\1\0\31\53\1\356\2\53\67\0"+
    "\1\357\1\0\34\53\1\0\32\53\1\360\1\53\70\0"+
    "\1\361\34\53\1\0\33\53\1\362\66\0\1\363\2\0"+
    "\34\53\1\0\31\53\1\364\2\53\67\0\1\365\1\0"+
    "\34\53\1\0\32\53\1\366\1\53\70\0\1\367\34\53"+
    "\1\0\33\53\1\370\66\0\1\371\2\0\34\53\1\0"+
    "\31\53\1\372\2\53\67\0\1\373\1\0\34\53\1\0"+
    "\32\53\1\374\1\53\66\0\1\375\2\0\34\53\1\0"+
    "\31\53\1\376\2\53\67\0\1\377\1\0\34\53\1\0"+
    "\32\53\1\u0100\1\53\66\0\1\u0101\2\0\34\53\1\0"+
    "\31\53\1\u0102\2\53\66\0\1\u0103\2\0\34\53\1\0"+
    "\31\53\1\u0104\2\53\66\0\1\u0105\2\0\34\53\1\0"+
    "\31\53\1\u0106\2\53\66\0\1\u0107\2\0\34\53\1\0"+
    "\31\53\1\u0108\2\53\63\0\1\u0109\5\0\34\53\1\0"+
    "\26\53\1\u010a\5\53\63\0\1\u010b\5\0\34\53\1\0"+
    "\26\53\1\u010c\5\53\52\0\1\u010d\16\0\34\53\1\0"+
    "\15\53\1\u010e\16\53\60\0\1\u010f\10\0\34\53\1\0"+
    "\23\53\1\u0110\10\53\51\0\1\u0111\17\0\34\53\1\0"+
    "\14\53\1\u0112\17\53\63\0\1\u0113\5\0\34\53\1\0"+
    "\26\53\1\u0114\5\53\52\0\1\u0115\16\0\34\53\1\0"+
    "\15\53\1\u0116\16\53\30\0\1\u0117\40\0\30\53\1\u0118"+
    "\3\53\1\0\34\53\51\0\1\u0119\17\0\34\53\1\0"+
    "\14\53\1\u011a\17\53\60\0\1\u011b\10\0\34\53\1\0"+
    "\23\53\1\u011c\10\53\52\0\1\u011d\16\0\34\53\1\0"+
    "\15\53\1\u011e\16\53\60\0\1\u011f\10\0\34\53\1\0"+
    "\23\53\1\u0120\10\53\51\0\1\u0121\17\0\34\53\1\0"+
    "\14\53\1\u0122\17\53\57\0\1\u0123\11\0\34\53\1\0"+
    "\22\53\1\u0124\11\53\57\0\1\u0125\11\0\34\53\1\0"+
    "\22\53\1\u0126\11\53";

  private static int [] zzUnpackTrans() {
    int [] result = new int[13452];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\11\0\1\11\4\1\1\11\6\1\1\11\2\1\1\11"+
    "\2\1\1\11\1\1\1\11\1\1\1\11\1\1\6\11"+
    "\45\1\1\11\5\1\2\11\1\1\1\0\2\1\1\0"+
    "\13\1\2\0\1\11\1\0\1\11\1\1\2\0\25\1"+
    "\1\11\2\1\1\0\2\1\1\11\1\0\1\11\7\1"+
    "\1\0\2\1\1\0\14\1\1\11\3\1\1\0\1\11"+
    "\2\1\1\0\3\1\2\0\13\1\1\0\1\1\1\0"+
    "\4\1\1\0\2\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\0\1\1\1\11\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[294];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    /**
     * Stack for keeping track of lexical states.
     */
    private Stack<Integer> _states = new Stack<Integer>();

    /**
     * Are indents tabs instead of spaces?
     */
    private static Boolean _tabIndents = null;

    /**
     * Indent stack to keep track of indentation levels.
     */
    private static Stack<Integer> _indents = new Stack<Integer>();

    /**
     * Current indent baseline.
     */
    private static int _currentIndent = 0;

    /**
     * Are we currently inside an indented block?
     */
    private static boolean _isIndented = false;

    /**
     * Start a new indented block (increase indent).
     */

    private IElementType _parseIndent(int count) {
        if (count > _currentIndent) {
            _indents.push(_currentIndent);
            _currentIndent += count;
            _switchToState(INDENTED);
            return _out(LiveScriptTypes.INDENT);
        }
        else if (count < _currentIndent) {
            if (!_indents.empty())
                _currentIndent = _indents.pop();
            _exitState();
            if (_currentIndent < 1) {
                _isIndented = false;
            }
            return _out(LiveScriptTypes.DEDENT);
        }
        return null;
    }

    private void _switchToState(int state) {
        System.out.println("Switching to state " + _stateName(state) + ".");
        yybegin(INDENTED);
    }

    /**
     * Enter a lexical state and push the previous one to the stack.
     */
    private void _enterState(int state) {
        System.out.println("Entering state " + _stateName(state) + ".");
        _states.push(yystate());
        yybegin(state);
    }

    /**
     * Leave a lexical state and return to the previous one (if any).
     * @returns boolean True if state was switched to a previous one, false if already at YYINITIAL.
     */
    private boolean _exitState() {
        if (_states.empty()) {
            System.out.println("State stack empty, defaulting to YYINITIAL.");
            yybegin(YYINITIAL);
            return false;
        }
        else {
            int newState = _states.pop();
            System.out.println("Exiting state " + _stateName(yystate()) + ", state is now " + _stateName(newState));
            yybegin(newState);
            return true;
        }
    }

    /**
     * Move the input position back to the start of the matched string.
     */
    private void _rewind() {
        yypushback(yylength());
    }

    /**
     * Move input position backwards.
     */
    private void _rewindBy(int count) {
        yypushback(count);
    }

    private void _advanceBy(int count) {
        _rewindBy(-count);
    }

    /**
     * Move the input position back to the first position of a given string
     */
    private boolean _rewindTo(String text) {
        final int position = yytext().toString().indexOf(text);

        if (position != -1) {
          _rewindBy(position);
          return true;
        }

        return false;
    }

    private IElementType _out(IElementType input) {
        System.out.println("Matched [" + yytext() + "] as " + input);
        return input;
    }
    private String[] _stateNames = new String[] {
        "YYINITIAL",
        "INDENTED",
        "BLOCK_STATEMENT",
        "SIMPLE_STRING_STARTED",
        "FULL_STRING_STARTED",
        "STRING_VARIABLE",
        "STRING_SUSPENDED",
        "REGEX",
    };
    private String _stateName(int state) {
        return _stateNames[state / 2];
    }


  public LiveScriptLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public LiveScriptLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 144) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
        System.out.println("End of file reached, clearing out indentation stack.");
    _currentIndent = 0;
    _indents.clear();
    _states.clear();
    return;

    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      if (zzMarkedPosL > zzStartRead) {
        switch ((zzBufferArrayL != null ? zzBufferArrayL[zzMarkedPosL-1] : zzBufferL.charAt(zzMarkedPosL-1))) {
        case '\n':
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          zzAtBOL = true;
          break;
        case '\r': 
          if (zzMarkedPosL < zzEndReadL)
            zzAtBOL = (zzBufferArrayL != null ? zzBufferArrayL[zzMarkedPosL] : zzBufferL.charAt(zzMarkedPosL)) != '\n';
          else if (zzAtEOF)
            zzAtBOL = false;
          else {
            boolean eof = zzRefill();
            zzMarkedPosL = zzMarkedPos;
            zzEndReadL = zzEndRead;
            zzBufferL = zzBuffer;
            if (eof) 
              zzAtBOL = false;
            else 
              zzAtBOL = (zzBufferArrayL != null ? zzBufferArrayL[zzMarkedPosL] : zzBufferL.charAt(zzMarkedPosL)) != '\n';
          }
          break;
        default:
          zzAtBOL = false;
        }
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      if (zzAtBOL)
        zzState = ZZ_LEXSTATE[zzLexicalState+1];
      else
        zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 28: 
          { return _out(LiveScriptTypes.RESERVED_LITERAL);
          }
        case 43: break;
        case 40: 
          { return LiveScriptTypes.COMMENT_BLOCK;
          }
        case 44: break;
        case 15: 
          { return _out(LiveScriptTypes.PAREN_L);
          }
        case 45: break;
        case 41: 
          { return _out(LiveScriptTypes.HEREDOC);
          }
        case 46: break;
        case 24: 
          { return LiveScriptTypes.STRING;
          }
        case 47: break;
        case 12: 
          { return _out(LiveScriptTypes.COMMA);
          }
        case 48: break;
        case 33: 
          { _rewind(); _rewindBy(-1); _enterState(STRING_VARIABLE); return LiveScriptTypes.STRING;
          }
        case 49: break;
        case 27: 
          { _exitState(); return LiveScriptTypes.STRING_INTER_END;
          }
        case 50: break;
        case 3: 
          { return _out(LiveScriptTypes.IDENTIFIER);
          }
        case 51: break;
        case 21: 
          { System.out.println("I> state is " + yystate() + " text is [" + yytext() + "], dedenting");
        _rewind();
        return _parseIndent(0);
          }
        case 52: break;
        case 32: 
          { System.out.println("State is " + yystate() + ", text is [" + yytext() + "]");
        _rewindBy(1);
        IElementType result = _parseIndent(yylength());
        if (result != null) return result;
          }
        case 53: break;
        case 39: 
          { return LiveScriptTypes.THIS;
          }
        case 54: break;
        case 10: 
          { return _out(LiveScriptTypes.EQ);
          }
        case 55: break;
        case 6: 
          { _enterState(SIMPLE_STRING_STARTED); return _out(LiveScriptTypes.STRING_START);
          }
        case 56: break;
        case 31: 
          { _enterState(BLOCK_STATEMENT); return _out(LiveScriptTypes.EQ);
          }
        case 57: break;
        case 4: 
          { return LiveScriptTypes.DOT;
          }
        case 58: break;
        case 7: 
          { return _out(LiveScriptTypes.NEWLINE);
          }
        case 59: break;
        case 16: 
          { return _out(LiveScriptTypes.PAREN_R);
          }
        case 60: break;
        case 8: 
          { _enterState(FULL_STRING_STARTED); return _out(LiveScriptTypes.STRING_START);
          }
        case 61: break;
        case 19: 
          { return _out(LiveScriptTypes.COMMENT_LINE);
          }
        case 62: break;
        case 30: 
          { _enterState(REGEX); return _out(LiveScriptTypes.REGEX);
          }
        case 63: break;
        case 2: 
          { return _out(LiveScriptTypes.NUMBER);
          }
        case 64: break;
        case 22: 
          { return _out(LiveScriptTypes.STRING);
          }
        case 65: break;
        case 1: 
          { return TokenType.BAD_CHARACTER;
          }
        case 66: break;
        case 38: 
          { _rewindTo("#"); return TokenType.WHITE_SPACE;
          }
        case 67: break;
        case 35: 
          { char c = yycharat(yylength() - 1);
        if (c == '#')
            _rewindBy(1);
        else if (c == '/')
            _rewindBy(2);
        else
            throw new Error("Unexpected character: [" + c + "] at the end of regex line.");
        return _out(LiveScriptTypes.REGEX);
          }
        case 68: break;
        case 42: 
          { return LiveScriptTypes.TEST;
          }
        case 69: break;
        case 29: 
          { return _out(LiveScriptTypes.BACKSTRING);
          }
        case 70: break;
        case 17: 
          { return LiveScriptTypes.BRACK_L;
          }
        case 71: break;
        case 34: 
          { _enterState(STRING_SUSPENDED); return LiveScriptTypes.STRING_INTER_START;
          }
        case 72: break;
        case 26: 
          { _rewindBy(1); _enterState(YYINITIAL);
          }
        case 73: break;
        case 36: 
          { _exitState(); return _out(LiveScriptTypes.REGEX);
          }
        case 74: break;
        case 20: 
          { return _out(TokenType.WHITE_SPACE);
          }
        case 75: break;
        case 18: 
          { return LiveScriptTypes.BRACK_R;
          }
        case 76: break;
        case 23: 
          { _exitState(); return _out(LiveScriptTypes.STRING_END);
          }
        case 77: break;
        case 37: 
          { return _out(LiveScriptTypes.REGEX);
          }
        case 78: break;
        case 11: 
          { return _out(LiveScriptTypes.COLON);
          }
        case 79: break;
        case 25: 
          { _exitState(); return LiveScriptTypes.IDENTIFIER;
          }
        case 80: break;
        case 14: 
          { if (_exitState()) _rewindBy(1); else return LiveScriptTypes.CURL_R;
          }
        case 81: break;
        case 13: 
          { return _out(LiveScriptTypes.CURL_L);
          }
        case 82: break;
        case 5: 
          { return LiveScriptTypes.THIS_AT;
          }
        case 83: break;
        case 9: 
          { return _out(LiveScriptTypes.OPERATOR);
          }
        case 84: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
