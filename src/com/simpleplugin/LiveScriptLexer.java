/* The following code was generated by JFlex 1.4.3 on 15.28.2 16:28 */

package com.simpleplugin;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.simpleplugin.psi.LiveScriptTypes;
import com.intellij.psi.TokenType;
import com.intellij.util.containers.Stack;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 15.28.2 16:28 from the specification file
 * <tt>C:/home/martin/dev/misc/LiveScriptBrains/src/com/simpleplugin/LiveScript.flex</tt>
 */
class LiveScriptLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int SIMPLE_STRING_STARTED = 2;
  public static final int STRING_SUSPENDED = 6;
  public static final int BACK_STRING_STARTED = 8;
  public static final int FULL_STRING_STARTED = 4;
  public static final int STRING_VARIABLE = 10;
  public static final int YYINITIAL = 0;
  public static final int CHECK_BLOCK_END = 16;
  public static final int BLOCK_OP = 14;
  public static final int INDENTED = 12;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     4, 4
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\51\1\2\2\0\1\1\22\0\1\46\1\0\1\47\1\21"+
    "\1\34\1\50\1\0\1\43\1\44\1\45\1\23\1\40\1\37\1\35"+
    "\1\33\1\22\1\27\2\25\1\26\6\24\1\42\1\37\1\0\1\41"+
    "\3\0\32\31\1\0\1\36\1\37\1\0\1\32\1\0\1\16\2\31"+
    "\1\11\1\14\1\15\2\31\1\10\2\31\1\5\1\31\1\3\1\7"+
    "\2\31\1\13\1\17\1\12\1\4\1\6\2\31\1\20\1\31\1\52"+
    "\1\0\1\53\1\30\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\10\0\1\1\2\2\7\3\1\1\2\4\3\5\1\1"+
    "\2\6\1\7\1\10\1\11\1\12\1\13\1\1\1\14"+
    "\2\15\1\16\3\15\2\17\1\20\1\21\1\22\2\23"+
    "\1\24\1\25\1\26\2\27\1\3\1\30\5\3\1\31"+
    "\1\0\2\5\1\0\1\5\1\32\1\0\1\33\1\34"+
    "\4\3\1\0\1\5\1\0\1\35\1\31\2\0\1\36";

  private static int [] zzUnpackAction() {
    int [] result = new int[81];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\54\0\130\0\204\0\260\0\334\0\u0108\0\u0134"+
    "\0\u0160\0\u018c\0\u0160\0\u01b8\0\u01e4\0\u0210\0\u023c\0\u0268"+
    "\0\u0294\0\u02c0\0\u02ec\0\u0318\0\u0160\0\u0344\0\u0370\0\u039c"+
    "\0\u03c8\0\u0160\0\u03f4\0\u0420\0\u0160\0\u0160\0\u044c\0\u0160"+
    "\0\u0478\0\u0160\0\u04a4\0\u04d0\0\u0160\0\u04fc\0\u0528\0\u0554"+
    "\0\u0160\0\u018c\0\u0160\0\u0580\0\u0160\0\u05ac\0\u0160\0\u0160"+
    "\0\u0160\0\u0160\0\u05d8\0\u0160\0\u0604\0\u01e4\0\u0630\0\u065c"+
    "\0\u0688\0\u06b4\0\u06e0\0\u02ec\0\u070c\0\u0738\0\u0764\0\u0790"+
    "\0\u07bc\0\u03c8\0\u07e8\0\u0814\0\u0160\0\u0840\0\u086c\0\u0898"+
    "\0\u08c4\0\u08f0\0\u0790\0\u091c\0\u01e4\0\u070c\0\u0948\0\u0974"+
    "\0\u0974";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[81];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\11\1\12\1\13\1\14\2\15\1\16\1\17\2\15"+
    "\1\20\2\15\1\21\2\15\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\26\1\11\2\15\1\11\1\15"+
    "\1\25\1\31\1\11\1\25\1\32\1\33\1\34\1\35"+
    "\1\36\1\37\1\40\1\41\1\37\1\11\1\42\36\43"+
    "\1\44\4\43\1\45\10\43\21\46\1\47\14\46\1\50"+
    "\10\46\1\45\4\46\1\51\1\52\1\13\50\51\1\53"+
    "\1\11\1\12\1\13\50\11\1\42\1\11\1\12\1\13"+
    "\16\54\10\11\2\54\1\11\1\54\16\11\1\42\1\55"+
    "\1\56\1\57\43\55\1\60\2\55\1\61\2\55\1\62"+
    "\1\63\1\64\51\62\56\0\1\13\54\0\1\15\1\65"+
    "\2\15\1\66\11\15\3\0\4\15\1\0\2\15\1\0"+
    "\2\15\21\0\16\15\3\0\4\15\1\0\2\15\1\0"+
    "\2\15\21\0\4\15\1\67\11\15\3\0\4\15\1\0"+
    "\2\15\1\0\2\15\21\0\1\66\11\15\1\70\3\15"+
    "\3\0\4\15\1\0\2\15\1\0\2\15\21\0\10\15"+
    "\1\71\5\15\3\0\4\15\1\0\2\15\1\0\2\15"+
    "\21\0\13\15\1\72\2\15\3\0\4\15\1\0\2\15"+
    "\1\0\2\15\21\0\11\15\1\73\4\15\3\0\4\15"+
    "\1\0\2\15\1\0\2\15\16\0\2\74\1\0\51\74"+
    "\23\0\1\75\33\0\16\76\3\0\4\77\1\100\1\76"+
    "\1\77\1\101\23\0\16\76\3\0\4\26\1\100\1\76"+
    "\1\77\1\101\23\0\16\76\3\0\1\77\1\26\1\77"+
    "\1\26\1\100\1\76\1\77\1\101\20\0\1\102\2\0"+
    "\34\102\1\0\5\102\2\0\2\102\1\0\1\102\42\0"+
    "\1\32\55\0\1\103\56\0\1\37\2\0\1\37\51\0"+
    "\1\40\4\0\36\43\1\44\4\43\1\0\46\43\1\44"+
    "\15\43\21\46\1\0\14\46\1\50\10\46\1\0\4\46"+
    "\3\0\16\104\10\0\2\104\1\0\1\104\15\0\1\105"+
    "\1\0\36\46\1\50\15\46\3\0\16\54\3\0\4\54"+
    "\1\0\2\54\1\0\2\54\20\0\1\57\53\0\1\64"+
    "\54\0\2\15\1\106\13\15\3\0\4\15\1\0\2\15"+
    "\1\0\2\15\21\0\5\15\1\107\10\15\3\0\4\15"+
    "\1\0\2\15\1\0\2\15\21\0\12\15\1\66\3\15"+
    "\3\0\4\15\1\0\2\15\1\0\2\15\21\0\1\15"+
    "\1\110\14\15\3\0\4\15\1\0\2\15\1\0\2\15"+
    "\21\0\2\15\1\111\13\15\3\0\4\15\1\0\2\15"+
    "\1\0\2\15\21\0\14\15\1\66\1\15\3\0\4\15"+
    "\1\0\2\15\1\0\2\15\16\0\23\75\1\112\30\75"+
    "\3\0\16\76\10\0\1\76\25\0\16\76\3\0\4\77"+
    "\1\0\1\76\1\77\1\101\23\0\16\113\3\0\4\113"+
    "\1\0\1\113\25\0\16\76\3\0\4\101\1\0\1\76"+
    "\1\101\64\0\1\114\13\0\16\104\3\0\4\104\1\0"+
    "\2\104\1\0\2\104\21\0\2\15\1\115\13\15\3\0"+
    "\4\15\1\0\2\15\1\0\2\15\21\0\6\15\1\115"+
    "\7\15\3\0\4\15\1\0\2\15\1\0\2\15\21\0"+
    "\11\15\1\66\4\15\3\0\4\15\1\0\2\15\1\0"+
    "\2\15\21\0\14\15\1\110\1\15\3\0\4\15\1\0"+
    "\2\15\1\0\2\15\16\0\22\75\1\116\1\112\30\75"+
    "\43\114\1\117\53\114\1\120\53\114\1\121\10\114";

  private static int [] zzUnpackTrans() {
    int [] result = new int[2464];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\10\0\1\11\1\1\1\11\11\1\1\11\4\1\1\11"+
    "\2\1\2\11\1\1\1\11\1\1\1\11\2\1\1\11"+
    "\3\1\1\11\1\1\1\11\1\1\1\11\1\1\4\11"+
    "\1\1\1\11\10\1\1\0\2\1\1\0\2\1\1\0"+
    "\1\1\1\11\4\1\1\0\1\1\1\0\2\1\2\0"+
    "\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[81];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  private Stack<Integer> stack = new Stack<Integer>();

  /**
   * Track statement block indentation levels.
   */
  private Stack<Integer> blockStack = new Stack<Integer>();

    /**
     * Minimum indent level for current block;
     */
    private int currentBlockIndent = 0;

    /**
     *
     */
	private int currentIndent = 0;

    /**
     * Using tabs for indentation instead of spaces?
     */
    private Boolean tabIndents= null;

    /**
     * Start a new function block.
     */
    private void enterNewBlock() {
        blockStack.push(currentIndent);
        currentBlockIndent = currentIndent;
        currentIndent = 0;
    }

    private boolean exitBlock() {
        if (!blockStack.empty()) {
            currentBlockIndent = blockStack.pop();
            return true;
        }
        else {
            currentBlockIndent = 0;
            return false;
        }
    }

  /**
   * Push the actual state on top of the stack
   */
  private void pushState() {
    stack.push(yystate());
  }

  /**
   * Push the actual state on top of the stack
   * and change into another state
   *
   * @param state The new state
   */
  private void enterState(int state) {
    stack.push(yystate());
    yybegin(state);
  }

  /**
   * Pop the last state from the stack and change to it.
   * If the stack is empty, go to YYINITIAL
   */
    private boolean leaveState() {
        if (!stack.empty()) {
            yybegin(stack.pop());
            return true;
        } else {
            yybegin(YYINITIAL);
            return false;
        }
    }

    /**
     * Cancel/end current state and move to a new one without
     * modifying the stack.
     */
    private void changeStateTo(int newState) { yybegin(newState); }


    private LiveScriptLexer rewind() {
        yypushback(yylength());
        return this;
    }


  /**
   * Push the stream back to the position before the text match
   *
   * @param text The text to match
   * @return true when matched
   */
  private boolean rewindTo(String text) {
    final int position = yytext().toString().indexOf(text);

    if (position != -1) {
      yypushback(yylength() - position);
      return true;
    }

    return false;
  }


    // Move the input stream read position back.
    private LiveScriptLexer rewindBy(int count) {
        yypushback(count);
        return this;
    }

    // Advance the read position in the stream by the given number.
    private LiveScriptLexer advanceBy(int count) {
        yypushback(-count);
        return this;
    }


    /**
     * Rewind the input stream back to the position before
     * the text match and leave current state.
     */
    private boolean rewindAndLeaveState(String text) {
        final boolean success = rewindTo(text);
        if (success) {
            leaveState();
        }
        return true;
    }

  /**
   * Push the stream back to the position before the text match
   * and change into the given state
   *
   * @param text The text to match
   * @param state The new state
   * @return true when matched
   */
  private boolean pushBackAndState(String text, int state) {
    final boolean success = rewindTo(text);

    if (success) {
      enterState(state);
    }

    return success;
  }


  LiveScriptLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  LiveScriptLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 128) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 16: 
          { leaveState(); return LiveScriptTypes.STRING_START;
          }
        case 31: break;
        case 1: 
          { return TokenType.BAD_CHARACTER;
          }
        case 32: break;
        case 3: 
          { return LiveScriptTypes.IDENTIFIER;
          }
        case 33: break;
        case 15: 
          { rewindBy(1); enterState(YYINITIAL);
          }
        case 34: break;
        case 7: 
          { enterState(SIMPLE_STRING_STARTED); return LiveScriptTypes.STRING_START;
          }
        case 35: break;
        case 30: 
          { return LiveScriptTypes.HEREDOC;
          }
        case 36: break;
        case 2: 
          { // If we are in a special state, rewind the position so that
                        // the newline gets processed by the previous state.
                        if (leaveState()) rewind();

                        return LiveScriptTypes.NEWLINE;
          }
        case 37: break;
        case 13: 
          { return LiveScriptTypes.STRING;
          }
        case 38: break;
        case 20: 
          { if (tabIndents == null) tabIndents = false;
                    if (!tabIndents) currentIndent++;
                    if (currentIndent == 1)
                        return LiveScriptTypes.INDENT;
          }
        case 39: break;
        case 25: 
          { return LiveScriptTypes.COMMENT;
          }
        case 40: break;
        case 11: 
          { enterState(FULL_STRING_STARTED); return LiveScriptTypes.STRING_START;
          }
        case 41: break;
        case 5: 
          { return LiveScriptTypes.NUMBER;
          }
        case 42: break;
        case 28: 
          { enterState(STRING_SUSPENDED); return LiveScriptTypes.STRING_END;
          }
        case 43: break;
        case 6: 
          { enterState(BLOCK_OP); return LiveScriptTypes.OPERATOR;
          }
        case 44: break;
        case 10: 
          { return TokenType.WHITE_SPACE;
          }
        case 45: break;
        case 8: 
          { return LiveScriptTypes.PAREN_L;
          }
        case 46: break;
        case 9: 
          { return LiveScriptTypes.PAREN_R;
          }
        case 47: break;
        case 27: 
          { rewindTo("#"); advanceBy(1); enterState(STRING_VARIABLE); return LiveScriptTypes.STRING;
          }
        case 48: break;
        case 12: 
          { if (leaveState()) rewindBy(1);
          }
        case 49: break;
        case 18: 
          { enterState(YYINITIAL);
                    rewindBy(1);
          }
        case 50: break;
        case 24: 
          { return LiveScriptTypes.BOOLEAN;
          }
        case 51: break;
        case 23: 
          { enterNewBlock();
                    changeStateTo(INDENTED);
                    return LiveScriptTypes.BLOCK_START;
          }
        case 52: break;
        case 19: 
          { if (currentIndent <= currentBlockIndent) {
                        exitBlock();
                        currentIndent = 0;
                        return LiveScriptTypes.BLOCK_END;
                    }
                    currentIndent = 0;
                    return LiveScriptTypes.NEWLINE;
          }
        case 53: break;
        case 22: 
          { leaveState(); rewindBy(1);
          }
        case 54: break;
        case 29: 
          { return LiveScriptTypes.NULL;
          }
        case 55: break;
        case 4: 
          { return LiveScriptTypes.OPERATOR;
          }
        case 56: break;
        case 14: 
          { leaveState(); return LiveScriptTypes.STRING_END;
          }
        case 57: break;
        case 26: 
          { return LiveScriptTypes.BACKSTRING;
          }
        case 58: break;
        case 21: 
          { if (tabIndents == null) tabIndents = true;
                    if (tabIndents) currentIndent++;
                    if (currentIndent == 1)
                        return LiveScriptTypes.INDENT;
          }
        case 59: break;
        case 17: 
          { leaveState(); return LiveScriptTypes.IDENTIFIER;
          }
        case 60: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
