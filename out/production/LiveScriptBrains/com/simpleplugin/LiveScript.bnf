{
  parserClass="com.simpleplugin.parser.LiveScriptParser"

  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="LiveScript"
  psiImplClassSuffix="Impl"
  psiPackage="com.simpleplugin.psi"
  psiImplPackage="com.simpleplugin.psi.impl"

  elementTypeHolderClass="com.simpleplugin.psi.LiveScriptTypes"
  elementTypeClass="com.simpleplugin.psi.LiveScriptElementType"
  tokenTypeClass="com.simpleplugin.psi.LiveScriptTokenType"

  parserUtilClass="com.simpleplugin.psi.LiveScriptParserUtil"

  extends(".*Expression$")=Expression
}

file ::= (Statement | Com | NEWLINE)* <<eof>>

external objDef ::= objDef

private recover_statement ::= !NEWLINE
private recover_inter ::= !(NEWLINE | STRING_INTER_END)

Expression ::= TestExpression
    | RightOpExpression
    | OpExpression
    | CurlObjDefExpression
    | ObjDefExpression
    | LiteralExpression
    | ReferenceExpression

Statement ::= <<optionalParens Expression>> {recoverWhile="recover_statement"}

InterLines ::= <<optionalParens Expression>>* {recoverWhile="recover_inter"}

BlockStatement ::= INDENT Statement+ DEDENT?

CurlObjDefExpression ::= CURL_L (<<multiLineArgList (ExplicitPropDefExpression | ImplicitPropDefExpression)>>)* CURL_R

ObjDefExpression ::= <<multiLineArgList ExplicitPropDefExpression>>

ExplicitPropDefExpression ::= (<<optionalParens ValueExpression>> COLON Expression) {rightAssociative=true}

ImplicitPropDefExpression ::= (("+"|"-")? <<optionalParens ValueExpression>>)


OpExpression ::= Expression OPERATOR NEWLINE? Expression

RightOpExpression ::= ReferenceExpression RIGHT_OP NEWLINE? Expression {rightAssociative=true}

ValueExpression ::= ReferenceExpression | LiteralExpression

LiteralExpression ::= RESERVED_LITERAL | ReferenceExpression | NUMBER | InterpolatedStringExpression | StringExpression

ReferenceExpression ::= IDENTIFIER (DOT IDENTIFIER)*

StringExpression ::= STRING_START string STRING_END | BACKSTRING | HEREDOC

TestExpression ::= TEST

InterStringExpression ::= STRING_START string STRING_INTER_START
    | STRING_INTER_END string STRING_INTER_START
    | STRING_INTER_END string STRING_END

InterpolatedStringExpression ::= InterStringExpression+ InterLines InterStringExpression+

// Pieces
private meta optionalParens ::= PAREN_L <<param>> PAREN_R | <<param>>
private meta multiLineArgList ::= <<param>> (AnySeparator <<param>>)* {rightAssociative=true}
Com ::= COMMENT_LINE | COMMENT_BLOCK
InlineSeparator::= COMMA | SPACE+
AnySeparator::= InlineSeparator | SPACE* NEWLINE SPACE*
private string ::= STRING* (IDENTIFIER | STRING)*