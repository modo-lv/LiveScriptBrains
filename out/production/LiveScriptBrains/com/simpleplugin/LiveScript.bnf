{
  parserClass="com.simpleplugin.parser.LiveScriptParser"

  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="LiveScript"
  psiImplClassSuffix="Impl"
  psiPackage="com.simpleplugin.psi"
  psiImplPackage="com.simpleplugin.psi.impl"

  elementTypeHolderClass="com.simpleplugin.psi.LiveScriptTypes"
  elementTypeClass="com.simpleplugin.psi.LiveScriptElementType"
  tokenTypeClass="com.simpleplugin.psi.LiveScriptTokenType"

  extends(".*Expression$")=Expression
}

file ::= (Statement COMMENT? | COMMENT)* <<eof>> {recoverWhile="recover_statement"}
private recover_statement ::= !(COMMENT | <<eof>>)

Statement ::= Expression

Expression ::= BlockExpression
    | OpExpression
    | LiteralExpression

BlockExpression ::= INDENT Statement+ DEDENT?

OpExpression ::= IDENTIFIER OPERATOR Expression

LiteralExpression ::= IDENTIFIER | NUMBER


/*
file ::= (Statement | NEWLINE)* <<eof>>

Statement ::= BlockStatement | COMMENT | Expression {recoverWhile="recover_statement"}

BlockStatement ::= BLOCK_START (COMMENT | INDENT Expression | NEWLINE)* BLOCK_END

// On any errors, ignore everything until the next line.
private recover_statement ::= !NEWLINE


*/
/** EXPRESSIONS **//*


Expression ::= ParenExpression
    | OperationExpression
    | LiteralExpression
    | ReferenceExpression

ParenExpression ::= PAREN_L Expression PAREN_R

OperationExpression ::= ReferenceExpression OPERATOR (BlockStatement | Expression)

ReferenceExpression ::= IDENTIFIER

// Anything that is a pure value - strings, numbers, booleans, Nulls ...
LiteralExpression ::= NULL | BOOLEAN | NUMBER | StringExpression

StringExpression ::= STRING_START STRING* (IDENTIFIER | STRING)* STRING_END | BACKSTRING | HEREDOC
*/


